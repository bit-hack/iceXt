     1                                  ;     _          _  ________
     2                                  ;    (_)_______ | |/ /_  __/
     3                                  ;   / / ___/ _ \|   / / /
     4                                  ;  / / /__/  __/   | / /
     5                                  ; /_/\___/\___/_/|_|/_/
     6                                  ;
     7                                  cpu 8086
     8                                  org 0
     9                                  [BITS 16]
    10                                  
    11                                  
    12                                  ; Enable hard disk emulation
    13                                  ;
    14                                  ; cylinders  64
    15                                  ; sectors    63
    16                                  ; heads      16
    17                                  ;            32Mb max
    18                                  ;
    19                                  ; If disabled will fall back to 1.44Mb floppy emulation
    20                                  ;
    21                                  %define USE_HDD     1
    22                                  %define USE_CLICKER 1
    23                                  
    24                                  %define PORT_DEBUG    0xb0
    25                                  %define PORT_SPI_DATA 0xb8
    26                                  %define PORT_SPI_CTRL 0xb9
    27                                  %define PORT_CLICK    0xba
    28                                  
    29                                  %define SD_DUMMY_CLOCKS 10
    30                                  %define SD_RESP_WAIT    16
    31                                  
    32                                  %define ERR_SUCCESS     0x00
    33                                  %define ERR_NOT_READY   0xaa
    34                                  %define ERR_INVALID_CMD 0x01
    35                                  
    36                                  %macro SD_SEND 1
    37                                    push ax
    38                                    mov al, %1
    39                                    call sd_send
    40                                    pop ax
    41                                  %endmacro
    42                                  
    43                                  %macro SD_SEND_CMD 6
    44                                    SD_SEND (0x40|%1)
    45                                    SD_SEND %2
    46                                    SD_SEND %3
    47                                    SD_SEND %4
    48                                    SD_SEND %5
    49                                    SD_SEND (0x01|%6)
    50                                  %endmacro
    51                                  
    52                                  %macro SD_DUMMY_BYTE 0
    53                                    push ax
    54                                    mov al, 0xff
    55                                    call sd_send
    56                                    pop ax
    57                                  %endmacro
    58                                  
    59                                  %macro SD_RECV 0
    60                                    call sd_recv
    61                                  %endmacro
    62                                  
    63                                  %macro SD_CS 1
    64                                    push ax
    65                                    mov al, %1
    66                                    call sd_set_cs
    67                                    pop ax
    68                                  %endmacro
    69                                  
    70                                  %macro DEBUG 1
    71                                    push ax
    72                                    mov ax, %1
    73                                    out PORT_DEBUG, al
    74                                    pop ax
    75                                  %endmacro
    76                                  
    77                                  ;------------------------------------------------------------------------------
    78                                  signature:
    79 00000000 55AA                      db 0x55, 0xAA
    80 00000002 04                        db 0x4
    81                                  
    82                                  ;------------------------------------------------------------------------------
    83                                  rom_entry:
    84 00000003 50                        push ax
    85 00000004 53                        push bx
    86 00000005 51                        push cx
    87 00000006 52                        push dx
    88 00000007 57                        push di
    89 00000008 56                        push si
    90 00000009 1E                        push ds
    91 0000000A E83700                    call sd_init
    92 0000000D 84C0                      test al, al
    93 0000000F 7403                      jz .rom_entry_fail
    94 00000011 E80800                    call install_int13
    95                                  .rom_entry_fail:
    96 00000014 1F                        pop ds
    97 00000015 5E                        pop si
    98 00000016 5F                        pop di
    99 00000017 5A                        pop dx
   100 00000018 59                        pop cx
   101 00000019 5B                        pop bx
   102 0000001A 58                        pop ax
   103 0000001B CB                        retf
   104                                  
   105                                  ;------------------------------------------------------------------------------
   106                                  install_int13:
   107 0000001C B80000                    mov ax, 0
   108 0000001F 8ED8                      mov ds, ax
   109 00000021 3E8C0E4E00                mov ds:[0x4e], cs
   110 00000026 B8[8B02]                  mov ax, int13
   111 00000029 3EA34C00                  mov ds:[0x4c], ax
   112 0000002D C3                        ret
   113                                  
   114                                  ;------------------------------------------------------------------------------
   115                                  sd_send:
   116 0000002E 50                        push ax
   117 0000002F E6B8                      out PORT_SPI_DATA, al
   118                                  .delay:
   119 00000031 E4B9                      in al, PORT_SPI_CTRL
   120 00000033 A801                      test al, 0x1
   121 00000035 75FA                      jnz .delay
   122 00000037 58                        pop ax
   123 00000038 C3                        ret
   124                                  
   125                                  ;------------------------------------------------------------------------------
   126                                  sd_recv:
   127 00000039 B0FF                      mov al, 0xff
   128 0000003B E8F0FF                    call sd_send
   129 0000003E E4B8                      in al, PORT_SPI_DATA
   130 00000040 C3                        ret
   131                                  
   132                                  ;------------------------------------------------------------------------------
   133                                  sd_set_cs:
   134 00000041 E6B9                      out PORT_SPI_CTRL, al
   135 00000043 C3                        ret
   136                                  
   137                                  ;------------------------------------------------------------------------------
   138                                  sd_init:
   139                                  
   140                                    ;
   141                                    ; deassert SD card
   142                                    ;
   143                                    SD_CS 1
    64 00000044 50                  <1>  push ax
    65 00000045 B001                <1>  mov al, %1
    66 00000047 E8F7FF              <1>  call sd_set_cs
    67 0000004A 58                  <1>  pop ax
   144                                  
   145                                    ;
   146                                    ; send dummy clocks
   147                                    ;
   148 0000004B B90A00                    mov cx, SD_DUMMY_CLOCKS
   149                                  .dummy_clocks:
   150                                    SD_DUMMY_BYTE
    53 0000004E 50                  <1>  push ax
    54 0000004F B0FF                <1>  mov al, 0xff
    55 00000051 E8DAFF              <1>  call sd_send
    56 00000054 58                  <1>  pop ax
   151 00000055 E2F7                      loop .dummy_clocks
   152                                  
   153                                    ;
   154                                    ; assert SD card
   155                                    ;
   156                                    SD_CS 0
    64 00000057 50                  <1>  push ax
    65 00000058 B000                <1>  mov al, %1
    66 0000005A E8E4FF              <1>  call sd_set_cs
    67 0000005D 58                  <1>  pop ax
   157                                  
   158                                    ;
   159                                    ; send CMD0 (go idle)
   160                                    ;
   161                                  .step_1:
   162                                    SD_SEND_CMD 0, 0, 0, 0, 0, 0x95
    44                              <1>  SD_SEND (0x40|%1)
    37 0000005E 50                  <2>  push ax
    38 0000005F B040                <2>  mov al, %1
    39 00000061 E8CAFF              <2>  call sd_send
    40 00000064 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 00000065 50                  <2>  push ax
    38 00000066 B000                <2>  mov al, %1
    39 00000068 E8C3FF              <2>  call sd_send
    40 0000006B 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 0000006C 50                  <2>  push ax
    38 0000006D B000                <2>  mov al, %1
    39 0000006F E8BCFF              <2>  call sd_send
    40 00000072 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 00000073 50                  <2>  push ax
    38 00000074 B000                <2>  mov al, %1
    39 00000076 E8B5FF              <2>  call sd_send
    40 00000079 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 0000007A 50                  <2>  push ax
    38 0000007B B000                <2>  mov al, %1
    39 0000007D E8AEFF              <2>  call sd_send
    40 00000080 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 00000081 50                  <2>  push ax
    38 00000082 B095                <2>  mov al, %1
    39 00000084 E8A7FF              <2>  call sd_send
    40 00000087 58                  <2>  pop ax
   163                                  
   164 00000088 B91000                    mov cx, SD_RESP_WAIT
   165                                  .step_1_response:
   166                                    SD_RECV
    60 0000008B E8ABFF              <1>  call sd_recv
   167 0000008E 3C01                      cmp al, 0x01
   168 00000090 7405                      je .step_1_done
   169 00000092 E2F7                      loop .step_1_response
   170 00000094 E96401                    jmp .sd_init_fail
   171                                  .step_1_done:
   172                                  
   173                                    SD_DUMMY_BYTE
    53 00000097 50                  <1>  push ax
    54 00000098 B0FF                <1>  mov al, 0xff
    55 0000009A E891FF              <1>  call sd_send
    56 0000009D 58                  <1>  pop ax
   174                                    SD_DUMMY_BYTE
    53 0000009E 50                  <1>  push ax
    54 0000009F B0FF                <1>  mov al, 0xff
    55 000000A1 E88AFF              <1>  call sd_send
    56 000000A4 58                  <1>  pop ax
   175                                  
   176                                    ;
   177                                    ; send CMD8
   178                                    ;
   179                                  .step_2:
   180                                    SD_SEND_CMD 8, 0, 0, 1, 0xaa, 0x86
    44                              <1>  SD_SEND (0x40|%1)
    37 000000A5 50                  <2>  push ax
    38 000000A6 B048                <2>  mov al, %1
    39 000000A8 E883FF              <2>  call sd_send
    40 000000AB 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 000000AC 50                  <2>  push ax
    38 000000AD B000                <2>  mov al, %1
    39 000000AF E87CFF              <2>  call sd_send
    40 000000B2 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 000000B3 50                  <2>  push ax
    38 000000B4 B000                <2>  mov al, %1
    39 000000B6 E875FF              <2>  call sd_send
    40 000000B9 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 000000BA 50                  <2>  push ax
    38 000000BB B001                <2>  mov al, %1
    39 000000BD E86EFF              <2>  call sd_send
    40 000000C0 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 000000C1 50                  <2>  push ax
    38 000000C2 B0AA                <2>  mov al, %1
    39 000000C4 E867FF              <2>  call sd_send
    40 000000C7 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 000000C8 50                  <2>  push ax
    38 000000C9 B087                <2>  mov al, %1
    39 000000CB E860FF              <2>  call sd_send
    40 000000CE 58                  <2>  pop ax
   181                                  
   182 000000CF B91000                    mov cx, SD_RESP_WAIT
   183                                  .step_2_response:
   184                                    SD_RECV
    60 000000D2 E864FF              <1>  call sd_recv
   185 000000D5 3C01                      cmp al, 0x01
   186 000000D7 7405                      je .step_2_done
   187 000000D9 E2F7                      loop .step_2_response
   188 000000DB E91D01                    jmp .sd_init_fail
   189                                  .step_2_done:
   190                                    SD_RECV
    60 000000DE E858FF              <1>  call sd_recv
   191                                    SD_RECV
    60 000000E1 E855FF              <1>  call sd_recv
   192                                    SD_RECV
    60 000000E4 E852FF              <1>  call sd_recv
   193                                    SD_RECV
    60 000000E7 E84FFF              <1>  call sd_recv
   194 000000EA 3CAA                      cmp al, 0xaa
   195 000000EC 7403E90A01                jne .sd_init_fail
   196                                  
   197                                    ;
   198                                    ; send CMD58
   199                                    ;
   200                                  .step_3:
   201                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    44                              <1>  SD_SEND (0x40|%1)
    37 000000F1 50                  <2>  push ax
    38 000000F2 B07A                <2>  mov al, %1
    39 000000F4 E837FF              <2>  call sd_send
    40 000000F7 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 000000F8 50                  <2>  push ax
    38 000000F9 B000                <2>  mov al, %1
    39 000000FB E830FF              <2>  call sd_send
    40 000000FE 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 000000FF 50                  <2>  push ax
    38 00000100 B000                <2>  mov al, %1
    39 00000102 E829FF              <2>  call sd_send
    40 00000105 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 00000106 50                  <2>  push ax
    38 00000107 B000                <2>  mov al, %1
    39 00000109 E822FF              <2>  call sd_send
    40 0000010C 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 0000010D 50                  <2>  push ax
    38 0000010E B000                <2>  mov al, %1
    39 00000110 E81BFF              <2>  call sd_send
    40 00000113 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 00000114 50                  <2>  push ax
    38 00000115 B0CD                <2>  mov al, %1
    39 00000117 E814FF              <2>  call sd_send
    40 0000011A 58                  <2>  pop ax
   202                                  
   203 0000011B B91000                    mov cx, SD_RESP_WAIT
   204                                  .step_3_response:
   205                                    SD_RECV
    60 0000011E E818FF              <1>  call sd_recv
   206 00000121 3C01                      cmp al, 0x01
   207 00000123 7405                      je .step_3_done
   208 00000125 E2F7                      loop .step_3_response
   209 00000127 E9D100                    jmp .sd_init_fail
   210                                  .step_3_done:
   211                                    SD_RECV
    60 0000012A E80CFF              <1>  call sd_recv
   212                                    SD_RECV
    60 0000012D E809FF              <1>  call sd_recv
   213                                    SD_RECV
    60 00000130 E806FF              <1>  call sd_recv
   214                                    SD_RECV
    60 00000133 E803FF              <1>  call sd_recv
   215                                  
   216                                    ;
   217                                    ; send CMD55
   218                                    ;
   219 00000136 B9FFFF                    mov cx, 0xffff
   220                                  .step_4:
   221                                    SD_SEND_CMD 55, 0, 0, 0, 0, 0xcc
    44                              <1>  SD_SEND (0x40|%1)
    37 00000139 50                  <2>  push ax
    38 0000013A B077                <2>  mov al, %1
    39 0000013C E8EFFE              <2>  call sd_send
    40 0000013F 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 00000140 50                  <2>  push ax
    38 00000141 B000                <2>  mov al, %1
    39 00000143 E8E8FE              <2>  call sd_send
    40 00000146 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 00000147 50                  <2>  push ax
    38 00000148 B000                <2>  mov al, %1
    39 0000014A E8E1FE              <2>  call sd_send
    40 0000014D 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 0000014E 50                  <2>  push ax
    38 0000014F B000                <2>  mov al, %1
    39 00000151 E8DAFE              <2>  call sd_send
    40 00000154 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 00000155 50                  <2>  push ax
    38 00000156 B000                <2>  mov al, %1
    39 00000158 E8D3FE              <2>  call sd_send
    40 0000015B 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 0000015C 50                  <2>  push ax
    38 0000015D B0CD                <2>  mov al, %1
    39 0000015F E8CCFE              <2>  call sd_send
    40 00000162 58                  <2>  pop ax
   222 00000163 89CA                      mov dx, cx
   223 00000165 B91000                    mov cx, SD_RESP_WAIT
   224                                  .step_4_response:
   225                                    SD_RECV
    60 00000168 E8CEFE              <1>  call sd_recv
   226 0000016B A8FE                      test al, 0xfe
   227 0000016D 7405                      jz .step_4_done
   228 0000016F E2F7                      loop .step_4_response
   229 00000171 E98700                    jmp .sd_init_fail
   230                                  .step_4_done:
   231                                  
   232                                    ;
   233                                    ; send ACMD41
   234                                    ;
   235                                  .step_5:
   236                                    SD_SEND_CMD 41, 0x40, 0, 0, 0, 0xcc
    44                              <1>  SD_SEND (0x40|%1)
    37 00000174 50                  <2>  push ax
    38 00000175 B069                <2>  mov al, %1
    39 00000177 E8B4FE              <2>  call sd_send
    40 0000017A 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 0000017B 50                  <2>  push ax
    38 0000017C B040                <2>  mov al, %1
    39 0000017E E8ADFE              <2>  call sd_send
    40 00000181 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 00000182 50                  <2>  push ax
    38 00000183 B000                <2>  mov al, %1
    39 00000185 E8A6FE              <2>  call sd_send
    40 00000188 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 00000189 50                  <2>  push ax
    38 0000018A B000                <2>  mov al, %1
    39 0000018C E89FFE              <2>  call sd_send
    40 0000018F 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 00000190 50                  <2>  push ax
    38 00000191 B000                <2>  mov al, %1
    39 00000193 E898FE              <2>  call sd_send
    40 00000196 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 00000197 50                  <2>  push ax
    38 00000198 B0CD                <2>  mov al, %1
    39 0000019A E891FE              <2>  call sd_send
    40 0000019D 58                  <2>  pop ax
   237 0000019E B91000                    mov cx, SD_RESP_WAIT
   238                                  .step_5_response:
   239                                    SD_RECV
    60 000001A1 E895FE              <1>  call sd_recv
   240 000001A4 A8FE                      test al, 0xfe
   241 000001A6 7404                      jz .step_5_done
   242 000001A8 E2F7                      loop .step_5_response
   243 000001AA EB4F                      jmp .sd_init_fail 
   244                                  .step_5_done:
   245                                  
   246                                    ; if R1 response is not IDLE, issue ACMD41 again
   247 000001AC 84C0                      test al, al
   248 000001AE 7404                      jz .step_6  
   249 000001B0 89D1                      mov cx, dx
   250 000001B2 E285                      loop .step_4
   251                                  
   252                                    ;
   253                                    ; send CMD58
   254                                    ;
   255                                  .step_6:
   256                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    44                              <1>  SD_SEND (0x40|%1)
    37 000001B4 50                  <2>  push ax
    38 000001B5 B07A                <2>  mov al, %1
    39 000001B7 E874FE              <2>  call sd_send
    40 000001BA 58                  <2>  pop ax
    45                              <1>  SD_SEND %2
    37 000001BB 50                  <2>  push ax
    38 000001BC B000                <2>  mov al, %1
    39 000001BE E86DFE              <2>  call sd_send
    40 000001C1 58                  <2>  pop ax
    46                              <1>  SD_SEND %3
    37 000001C2 50                  <2>  push ax
    38 000001C3 B000                <2>  mov al, %1
    39 000001C5 E866FE              <2>  call sd_send
    40 000001C8 58                  <2>  pop ax
    47                              <1>  SD_SEND %4
    37 000001C9 50                  <2>  push ax
    38 000001CA B000                <2>  mov al, %1
    39 000001CC E85FFE              <2>  call sd_send
    40 000001CF 58                  <2>  pop ax
    48                              <1>  SD_SEND %5
    37 000001D0 50                  <2>  push ax
    38 000001D1 B000                <2>  mov al, %1
    39 000001D3 E858FE              <2>  call sd_send
    40 000001D6 58                  <2>  pop ax
    49                              <1>  SD_SEND (0x01|%6)
    37 000001D7 50                  <2>  push ax
    38 000001D8 B0CD                <2>  mov al, %1
    39 000001DA E851FE              <2>  call sd_send
    40 000001DD 58                  <2>  pop ax
   257                                  
   258 000001DE B91000                    mov cx, SD_RESP_WAIT
   259                                  .step_6_response:
   260                                    SD_RECV
    60 000001E1 E855FE              <1>  call sd_recv
   261 000001E4 84C0                      test al, al
   262 000001E6 7404                      jz .step_6_done
   263 000001E8 E2F7                      loop .step_6_response
   264 000001EA EB0F                      jmp .sd_init_fail
   265                                  .step_6_done:
   266                                    SD_RECV   ; if &0xc0 then is SDHC
    60 000001EC E84AFE              <1>  call sd_recv
   267                                    SD_RECV
    60 000001EF E847FE              <1>  call sd_recv
   268                                    SD_RECV
    60 000001F2 E844FE              <1>  call sd_recv
   269                                    SD_RECV
    60 000001F5 E841FE              <1>  call sd_recv
   270                                  
   271                                  .sd_init_success:
   272 000001F8 B001                      mov al, 1
   273 000001FA C3                        ret
   274                                  
   275                                  .sd_init_fail:
   276 000001FB B000                      mov al, 0
   277 000001FD C3                        ret
   278                                  
   279                                  ;------------------------------------------------------------------------------
   280                                  ; ax    = sector
   281                                  ; es:bx = dest
   282                                  sd_read_sector:
   283                                  
   284                                    ;
   285                                    ; click generator
   286                                    ;
   287                                  %if USE_CLICKER
   288 000001FE E6BA                      out PORT_CLICK, al
   289                                  %endif
   290                                  
   291                                    ;
   292                                    ; send CMD17
   293                                    ;
   294                                    SD_SEND (0x40|17)
    37 00000200 50                  <1>  push ax
    38 00000201 B051                <1>  mov al, %1
    39 00000203 E828FE              <1>  call sd_send
    40 00000206 58                  <1>  pop ax
   295                                    SD_SEND 0
    37 00000207 50                  <1>  push ax
    38 00000208 B000                <1>  mov al, %1
    39 0000020A E821FE              <1>  call sd_send
    40 0000020D 58                  <1>  pop ax
   296                                    SD_SEND 0
    37 0000020E 50                  <1>  push ax
    38 0000020F B000                <1>  mov al, %1
    39 00000211 E81AFE              <1>  call sd_send
    40 00000214 58                  <1>  pop ax
   297                                    SD_SEND ah
    37 00000215 50                  <1>  push ax
    38 00000216 88E0                <1>  mov al, %1
    39 00000218 E813FE              <1>  call sd_send
    40 0000021B 58                  <1>  pop ax
   298                                    SD_SEND al
    37 0000021C 50                  <1>  push ax
    38 0000021D 88C0                <1>  mov al, %1
    39 0000021F E80CFE              <1>  call sd_send
    40 00000222 58                  <1>  pop ax
   299                                    SD_SEND (0x01|0xcc)
    37 00000223 50                  <1>  push ax
    38 00000224 B0CD                <1>  mov al, %1
    39 00000226 E805FE              <1>  call sd_send
    40 00000229 58                  <1>  pop ax
   300                                  
   301 0000022A 51                        push cx
   302 0000022B B90800                    mov cx, 8
   303                                  .cmd_17_response:
   304                                    SD_RECV
    60 0000022E E808FE              <1>  call sd_recv
   305 00000231 84C0                      test al, al
   306 00000233 7404                      jz .cmd_17_done
   307 00000235 E2F7                      loop .cmd_17_response
   308 00000237 EB1E                      jmp .fail
   309                                  .cmd_17_done:
   310                                  
   311                                    ; wait for start of block byte
   312 00000239 B9FF00                    mov cx, 0xff
   313                                  .wait_start:
   314                                    SD_RECV
    60 0000023C E8FAFD              <1>  call sd_recv
   315 0000023F 3CFE                      cmp al, 0xfe
   316 00000241 7404                      je .recv_start
   317 00000243 E2F7                      loop .wait_start
   318 00000245 EB10                      jmp .fail
   319                                  .recv_start:
   320                                  
   321                                    ; read a 512byte block
   322 00000247 B90002                    mov cx, 512
   323                                  .recv_sector:
   324                                    SD_RECV
    60 0000024A E8ECFD              <1>  call sd_recv
   325 0000024D 268807                    mov es:[bx], al
   326 00000250 43                        inc bx
   327 00000251 E2F7                      loop .recv_sector
   328                                  
   329                                  .success:
   330 00000253 59                        pop cx
   331 00000254 B001                      mov al, 1
   332 00000256 C3                        ret
   333                                  
   334                                  .fail:
   335 00000257 59                        pop cx
   336 00000258 B000                      mov al, 0
   337 0000025A C3                        ret
   338                                  
   339                                  
   340                                  %if USE_HDD
   341                                  ;------------------------------------------------------------------------------
   342                                  ; lba = (cylinder * HEADS + head) * SECTORS + sector;
   343                                  ;   ch    - cylinder  (64)
   344                                  ;   cl    - sector    (63)
   345                                  ;   dh    - head      (16)
   346                                  chs_to_lba_hdd:
   347 0000025B 53                        push bx
   348 0000025C 52                        push dx
   349 0000025D 51                        push cx
   350 0000025E 31C0                      xor ax, ax    ; accum = 0
   351 00000260 88E8                      mov al, ch
   352 00000262 D1E0                      shl ax, 1
   353 00000264 D1E0                      shl ax, 1
   354 00000266 D1E0                      shl ax, 1
   355 00000268 D1E0                      shl ax, 1     ; accum = cylinder * 16
   356 0000026A 88F2                      mov dl, dh
   357 0000026C 30F6                      xor dh, dh
   358 0000026E 01D0                      add ax, dx    ; accum += head
   359 00000270 89C3                      mov bx, ax
   360 00000272 D1E0                      shl ax, 1
   361 00000274 D1E0                      shl ax, 1
   362 00000276 D1E0                      shl ax, 1
   363 00000278 D1E0                      shl ax, 1
   364 0000027A D1E0                      shl ax, 1
   365 0000027C 89C2                      mov dx, ax
   366 0000027E 29DA                      sub dx, bx    ; note: sub early to avoid overflow
   367 00000280 01D0                      add ax, dx    ; accum *= 63
   368 00000282 30ED                      xor ch, ch
   369 00000284 49                        dec cx
   370 00000285 01C8                      add ax, cx    ; accum += (sector - 1)
   371 00000287 59                        pop cx
   372 00000288 5A                        pop dx
   373 00000289 5B                        pop bx
   374 0000028A C3                        ret
   375                                  %else
   376                                  ;------------------------------------------------------------------------------
   377                                  ; lba = (cylinder * HEADS + head) * SECTORS + sector;
   378                                  ;   ch    - cylinder  (80)
   379                                  ;   cl    - sector    (18)
   380                                  ;   dh    - head      (2)
   381                                  chs_to_lba_fdd:
   382                                    push bx
   383                                    push dx
   384                                    push cx
   385                                    xor ax, ax
   386                                    mov al, ch
   387                                    add ax, ax    ; acum = cylinder * 2
   388                                    xor ch, ch    ; ch is no longer needed
   389                                    mov dl, dh
   390                                    xor dh, dh    ; dx  = head
   391                                    add ax, dx    ; accum += head
   392                                    shl ax, 1
   393                                    mov bx, ax    ; bx = accum * 2
   394                                    shl ax, 1
   395                                    shl ax, 1
   396                                    shl ax, 1
   397                                    add ax, bx    ; accum *= 18
   398                                    dec cx
   399                                    add ax, cx    ; accum += (sector - 1)
   400                                    pop cx
   401                                    pop dx
   402                                    pop bx
   403                                    ret
   404                                  %endif
   405                                  
   406                                  ;------------------------------------------------------------------------------
   407                                  int13:
   408                                  
   409                                    ; out 0xbc, ax
   410                                    ; iret
   411                                  
   412                                    ; out 0xb0, ax  ; enable debugging
   413                                  
   414 0000028B FA                        cli
   415                                  
   416 0000028C 52                        push dx
   417 0000028D 51                        push cx
   418 0000028E 53                        push bx
   419 0000028F 50                        push ax
   420                                  
   421                                  %if USE_HDD
   422                                    ; without this check the floppy will be checked first
   423 00000290 80FA80                    cmp dl, 0x80
   424 00000293 751E                      jne .not_hdd
   425                                  %endif
   426                                  
   427                                    ; dispatch to specific handler
   428 00000295 80FC02                    cmp ah, 0x02
   429 00000298 7428                      je int13_02
   430 0000029A 80FC00                    cmp ah, 0x00
   431 0000029D 7419                      je int13_00
   432 0000029F 80FC01                    cmp ah, 0x01
   433 000002A2 7419                      je int13_01
   434 000002A4 80FC08                    cmp ah, 0x08
   435 000002A7 7444                      je int13_08
   436 000002A9 80FC15                    cmp ah, 0x15
   437 000002AC 7453                      je int13_15
   438                                  
   439 000002AE B400                      mov ah, ERR_SUCCESS
   440 000002B0 F8                        clc             ; CF = 0
   441 000002B1 EB57                      jmp int13_exit
   442                                  
   443                                  .not_hdd:
   444 000002B3 B401                      mov ah, 1
   445 000002B5 F9                        stc             ; CF = 1
   446 000002B6 EB52                      jmp int13_exit
   447                                  
   448                                  ;------------------------------------------------------------------------------
   449                                  ; Reset disk system
   450                                  int13_00:
   451 000002B8 B400                      mov ah, ERR_SUCCESS
   452 000002BA F8                        clc             ; CF = 0
   453 000002BB EB4D                      jmp int13_exit
   454                                  
   455                                  ;------------------------------------------------------------------------------
   456                                  ; Get status of last drive operation
   457                                  int13_01:
   458 000002BD B400                      mov ah, ERR_SUCCESS
   459                                    ; TODO: set AH with the last error code
   460 000002BF F8                        clc             ; CF = 0
   461 000002C0 EB48                      jmp int13_exit
   462                                  
   463                                  ;------------------------------------------------------------------------------
   464                                  ; Read Sectors From Drive
   465                                  ;   al    - sectors to read
   466                                  ;   ch    - cylinder
   467                                  ;   cl    - sector
   468                                  ;   dh    - head
   469                                  ;   dl    - drive
   470                                  ;   es:bx - buffer
   471                                  int13_02:
   472 000002C2 50                        push ax
   473                                  %if USE_HDD
   474 000002C3 E895FF                    call chs_to_lba_hdd
   475                                  %else
   476                                    call chs_to_lba_fdd
   477                                  %endif
   478 000002C6 59                        pop cx
   479 000002C7 30ED                      xor ch, ch
   480 000002C9 51                        push cx
   481                                  
   482                                  .int13_02_read_sector:
   483 000002CA 50                        push ax                 ; preserve sector number
   484 000002CB E830FF                    call sd_read_sector
   485 000002CE 84C0                      test al, al
   486 000002D0 740A                      jz .int13_02_fail
   487 000002D2 58                        pop ax                  ; restore sector number
   488 000002D3 40                        inc ax                  ; advance to the next sector
   489 000002D4 E2F4                      loop .int13_02_read_sector
   490                                  
   491 000002D6 58                        pop ax                  ; al = sectors read
   492 000002D7 B400                      mov ah, ERR_SUCCESS
   493 000002D9 F8                        clc                     ; CF = 0
   494 000002DA EB2E                      jmp int13_exit
   495                                  
   496                                  .int13_02_fail:
   497 000002DC 59                        pop cx                  ; cx was left on the stack so pop it
   498 000002DD B4AA                      mov ah, ERR_NOT_READY
   499 000002DF F9                        stc
   500 000002E0 EB28                      jmp int13_exit
   501                                  
   502                                  ;------------------------------------------------------------------------------
   503                                  ; Disk base table (only needed for floppies)
   504                                  disk_base_table:
   505 000002E2 CF                        db 11001111b
   506 000002E3 02                        db 2
   507 000002E4 25                        db 25h
   508 000002E5 02                        db 2           ; 2 - 512 bytes
   509 000002E6 11                        db 17          ; sectors per track (last sector number)
   510 000002E7 2A                        db 2Ah
   511 000002E8 FF                        db 0FFh
   512 000002E9 50                        db 50h
   513 000002EA F6                        db 0F6h
   514 000002EB 19                        db 19h
   515 000002EC 04                        db 4
   516                                  
   517                                  ;------------------------------------------------------------------------------
   518                                  ; Get drive parameters
   519                                  int13_08:
   520                                  %if USE_HDD == 0
   521                                    ; disk base table is only needed for floppies
   522                                    mov ax, cs
   523                                    mov es, ax
   524                                    mov di, disk_base_table
   525                                  %endif
   526 000002ED 58                        pop ax
   527 000002EE 5B                        pop bx
   528 000002EF 59                        pop cx
   529 000002F0 5A                        pop dx
   530                                  %if USE_HDD
   531 000002F1 B53F                      mov ch, 63
   532 000002F3 B13F                      mov cl, 63
   533 000002F5 B60F                      mov dh, 15
   534 000002F7 B201                      mov dl, 1
   535 000002F9 BB0000                    mov bx, 0
   536                                  %else
   537                                    mov bl, 4       ; 1.44Mb disk
   538                                    mov ch, 80      ; cylinders
   539                                    mov cl, 18      ; sectors
   540                                    mov dh, 1       ; sides (zero based)
   541                                    mov dl, 1       ; number of drives attached
   542                                  %endif
   543 000002FC B400                      mov ah, ERR_SUCCESS
   544 000002FE F8                        clc             ; CF = 0
   545 000002FF EB13                      jmp int32_exit_cf
   546                                  
   547                                  ;------------------------------------------------------------------------------
   548                                  ; Read disk type
   549                                  int13_15:
   550 00000301 58                        pop ax
   551 00000302 5B                        pop bx
   552 00000303 59                        pop cx
   553 00000304 5A                        pop dx
   554 00000305 B401                      mov ah, 1       ; diskette no change detection present
   555 00000307 F8                        clc             ; CF = 0
   556 00000308 EB0A                      jmp int32_exit_cf
   557                                  
   558                                  ;------------------------------------------------------------------------------
   559                                  int13_exit:
   560                                    ; fix return code as some functions need to return values
   561                                    ;
   562                                    ; 02 need to return in AL
   563                                    ; AH has status code
   564                                    ; can we move the value to the stack before it gets popd?
   565                                  
   566 0000030A 88E7                      mov bh, ah
   567 0000030C 58                        pop ax
   568 0000030D 88FC                      mov ah, bh
   569 0000030F 5B                        pop bx
   570 00000310 59                        pop cx
   571 00000311 5A                        pop dx
   572 00000312 EB00                      jmp int32_exit_cf
   573                                  
   574                                  ;------------------------------------------------------------------------------
   575                                  ; return from interrupt but propagate the carry flag
   576                                  int32_exit_cf:
   577 00000314 7210                      jb  .int32_exit_cf1
   578 00000316 56                        push si
   579 00000317 89E6                      mov si, sp
   580 00000319 83C606                    add si, 6
   581 0000031C 368024FE                  and byte ss:[si], 0xfe
   582 00000320 83EE06                    sub si, 6
   583 00000323 5E                        pop si
   584 00000324 FB                        sti
   585                                    ; out 0xb2, ax  ; turn off debugging
   586 00000325 CF                        iret
   587                                  .int32_exit_cf1:
   588 00000326 56                        push si
   589 00000327 89E6                      mov si, sp
   590 00000329 83C606                    add si, 6
   591 0000032C 36800C01                  or byte ss:[si], 1
   592 00000330 83EE06                    sub si, 6
   593 00000333 5E                        pop si
   594 00000334 FB                        sti
   595                                    ; out 0xb2, ax  ; turn off debugging
   596 00000335 CF                        iret
