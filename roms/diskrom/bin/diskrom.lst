     1                                  ;     _          _  ________
     2                                  ;    (_)_______ | |/ /_  __/
     3                                  ;   / / ___/ _ \|   / / /
     4                                  ;  / / /__/  __/   | / /
     5                                  ; /_/\___/\___/_/|_|/_/
     6                                  ;
     7                                  cpu 8086
     8                                  org 0
     9                                  [BITS 16]
    10                                  
    11                                  
    12                                  ; Enable hard disk emulation
    13                                  ;
    14                                  ; cylinders  64
    15                                  ; sectors    63
    16                                  ; heads      16
    17                                  ;            32Mb max
    18                                  ;
    19                                  ; If disabled will fall back to 1.44Mb floppy emulation
    20                                  ;
    21                                  %define USE_HDD     1
    22                                  %define USE_CLICKER 1
    23                                  %define USE_WRITE   0
    24                                  
    25                                  %define PORT_DEBUG    0xb0
    26                                  %define PORT_SPI_DATA 0xb8
    27                                  %define PORT_SPI_CTRL 0xb9
    28                                  %define PORT_CLICK    0xba
    29                                  
    30                                  %define SD_DUMMY_CLOCKS 10
    31                                  %define SD_RESP_WAIT    16
    32                                  
    33                                  %define ERR_SUCCESS     0x00
    34                                  %define ERR_NOT_READY   0xaa
    35                                  %define ERR_INVALID_CMD 0x01
    36                                  
    37                                  %macro SD_SEND 1
    38                                    push ax
    39                                    mov al, %1
    40                                    call sd_send
    41                                    pop ax
    42                                  %endmacro
    43                                  
    44                                  %macro SD_SEND_CMD 6
    45                                    SD_SEND (0x40|%1)
    46                                    SD_SEND %2
    47                                    SD_SEND %3
    48                                    SD_SEND %4
    49                                    SD_SEND %5
    50                                    SD_SEND (0x01|%6)
    51                                  %endmacro
    52                                  
    53                                  %macro SD_DUMMY_BYTE 0
    54                                    push ax
    55                                    mov al, 0xff
    56                                    call sd_send
    57                                    pop ax
    58                                  %endmacro
    59                                  
    60                                  %macro SD_RECV 0
    61                                    call sd_recv
    62                                  %endmacro
    63                                  
    64                                  %macro SD_CS 1
    65                                    push ax
    66                                    mov al, %1
    67                                    call sd_set_cs
    68                                    pop ax
    69                                  %endmacro
    70                                  
    71                                  %macro DEBUG 1
    72                                    push ax
    73                                    mov ax, %1
    74                                    out PORT_DEBUG, al
    75                                    pop ax
    76                                  %endmacro
    77                                  
    78                                  ;------------------------------------------------------------------------------
    79                                  signature:
    80 00000000 55AA                      db 0x55, 0xAA
    81 00000002 04                        db 0x4
    82                                  
    83                                  ;------------------------------------------------------------------------------
    84                                  rom_entry:
    85 00000003 50                        push ax
    86 00000004 53                        push bx
    87 00000005 51                        push cx
    88 00000006 52                        push dx
    89 00000007 57                        push di
    90 00000008 56                        push si
    91 00000009 1E                        push ds
    92 0000000A E83700                    call sd_init
    93 0000000D 84C0                      test al, al
    94 0000000F 7403                      jz .rom_entry_fail
    95 00000011 E80800                    call install_int13
    96                                  .rom_entry_fail:
    97 00000014 1F                        pop ds
    98 00000015 5E                        pop si
    99 00000016 5F                        pop di
   100 00000017 5A                        pop dx
   101 00000018 59                        pop cx
   102 00000019 5B                        pop bx
   103 0000001A 58                        pop ax
   104 0000001B CB                        retf
   105                                  
   106                                  ;------------------------------------------------------------------------------
   107                                  install_int13:
   108 0000001C B80000                    mov ax, 0
   109 0000001F 8ED8                      mov ds, ax
   110 00000021 3E8C0E4E00                mov ds:[0x4e], cs
   111 00000026 B8[1803]                  mov ax, int13
   112 00000029 3EA34C00                  mov ds:[0x4c], ax
   113 0000002D C3                        ret
   114                                  
   115                                  ;------------------------------------------------------------------------------
   116                                  sd_send:
   117 0000002E 50                        push ax
   118 0000002F E6B8                      out PORT_SPI_DATA, al
   119                                  .delay:
   120 00000031 E4B9                      in al, PORT_SPI_CTRL
   121 00000033 A801                      test al, 0x1
   122 00000035 75FA                      jnz .delay
   123 00000037 58                        pop ax
   124 00000038 C3                        ret
   125                                  
   126                                  ;------------------------------------------------------------------------------
   127                                  sd_recv:
   128 00000039 B0FF                      mov al, 0xff
   129 0000003B E8F0FF                    call sd_send
   130 0000003E E4B8                      in al, PORT_SPI_DATA
   131 00000040 C3                        ret
   132                                  
   133                                  ;------------------------------------------------------------------------------
   134                                  sd_set_cs:
   135 00000041 E6B9                      out PORT_SPI_CTRL, al
   136 00000043 C3                        ret
   137                                  
   138                                  ;------------------------------------------------------------------------------
   139                                  sd_init:
   140                                  
   141                                    ;
   142                                    ; deassert SD card
   143                                    ;
   144                                    SD_CS 1
    65 00000044 50                  <1>  push ax
    66 00000045 B001                <1>  mov al, %1
    67 00000047 E8F7FF              <1>  call sd_set_cs
    68 0000004A 58                  <1>  pop ax
   145                                  
   146                                    ;
   147                                    ; send dummy clocks
   148                                    ;
   149 0000004B B90A00                    mov cx, SD_DUMMY_CLOCKS
   150                                  .dummy_clocks:
   151                                    SD_DUMMY_BYTE
    54 0000004E 50                  <1>  push ax
    55 0000004F B0FF                <1>  mov al, 0xff
    56 00000051 E8DAFF              <1>  call sd_send
    57 00000054 58                  <1>  pop ax
   152 00000055 E2F7                      loop .dummy_clocks
   153                                  
   154                                    ;
   155                                    ; assert SD card
   156                                    ;
   157                                    SD_CS 0
    65 00000057 50                  <1>  push ax
    66 00000058 B000                <1>  mov al, %1
    67 0000005A E8E4FF              <1>  call sd_set_cs
    68 0000005D 58                  <1>  pop ax
   158                                  
   159                                    ;
   160                                    ; send CMD0 (go idle)
   161                                    ;
   162                                  .step_1:
   163                                    SD_SEND_CMD 0, 0, 0, 0, 0, 0x95
    45                              <1>  SD_SEND (0x40|%1)
    38 0000005E 50                  <2>  push ax
    39 0000005F B040                <2>  mov al, %1
    40 00000061 E8CAFF              <2>  call sd_send
    41 00000064 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 00000065 50                  <2>  push ax
    39 00000066 B000                <2>  mov al, %1
    40 00000068 E8C3FF              <2>  call sd_send
    41 0000006B 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 0000006C 50                  <2>  push ax
    39 0000006D B000                <2>  mov al, %1
    40 0000006F E8BCFF              <2>  call sd_send
    41 00000072 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 00000073 50                  <2>  push ax
    39 00000074 B000                <2>  mov al, %1
    40 00000076 E8B5FF              <2>  call sd_send
    41 00000079 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 0000007A 50                  <2>  push ax
    39 0000007B B000                <2>  mov al, %1
    40 0000007D E8AEFF              <2>  call sd_send
    41 00000080 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 00000081 50                  <2>  push ax
    39 00000082 B095                <2>  mov al, %1
    40 00000084 E8A7FF              <2>  call sd_send
    41 00000087 58                  <2>  pop ax
   164                                  
   165 00000088 B91000                    mov cx, SD_RESP_WAIT
   166                                  .step_1_response:
   167                                    SD_RECV
    61 0000008B E8ABFF              <1>  call sd_recv
   168 0000008E 3C01                      cmp al, 0x01
   169 00000090 7405                      je .step_1_done
   170 00000092 E2F7                      loop .step_1_response
   171 00000094 E96401                    jmp .sd_init_fail
   172                                  .step_1_done:
   173                                  
   174                                    SD_DUMMY_BYTE
    54 00000097 50                  <1>  push ax
    55 00000098 B0FF                <1>  mov al, 0xff
    56 0000009A E891FF              <1>  call sd_send
    57 0000009D 58                  <1>  pop ax
   175                                    SD_DUMMY_BYTE
    54 0000009E 50                  <1>  push ax
    55 0000009F B0FF                <1>  mov al, 0xff
    56 000000A1 E88AFF              <1>  call sd_send
    57 000000A4 58                  <1>  pop ax
   176                                  
   177                                    ;
   178                                    ; send CMD8
   179                                    ;
   180                                  .step_2:
   181                                    SD_SEND_CMD 8, 0, 0, 1, 0xaa, 0x86
    45                              <1>  SD_SEND (0x40|%1)
    38 000000A5 50                  <2>  push ax
    39 000000A6 B048                <2>  mov al, %1
    40 000000A8 E883FF              <2>  call sd_send
    41 000000AB 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 000000AC 50                  <2>  push ax
    39 000000AD B000                <2>  mov al, %1
    40 000000AF E87CFF              <2>  call sd_send
    41 000000B2 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 000000B3 50                  <2>  push ax
    39 000000B4 B000                <2>  mov al, %1
    40 000000B6 E875FF              <2>  call sd_send
    41 000000B9 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 000000BA 50                  <2>  push ax
    39 000000BB B001                <2>  mov al, %1
    40 000000BD E86EFF              <2>  call sd_send
    41 000000C0 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 000000C1 50                  <2>  push ax
    39 000000C2 B0AA                <2>  mov al, %1
    40 000000C4 E867FF              <2>  call sd_send
    41 000000C7 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 000000C8 50                  <2>  push ax
    39 000000C9 B087                <2>  mov al, %1
    40 000000CB E860FF              <2>  call sd_send
    41 000000CE 58                  <2>  pop ax
   182                                  
   183 000000CF B91000                    mov cx, SD_RESP_WAIT
   184                                  .step_2_response:
   185                                    SD_RECV
    61 000000D2 E864FF              <1>  call sd_recv
   186 000000D5 3C01                      cmp al, 0x01
   187 000000D7 7405                      je .step_2_done
   188 000000D9 E2F7                      loop .step_2_response
   189 000000DB E91D01                    jmp .sd_init_fail
   190                                  .step_2_done:
   191                                    SD_RECV
    61 000000DE E858FF              <1>  call sd_recv
   192                                    SD_RECV
    61 000000E1 E855FF              <1>  call sd_recv
   193                                    SD_RECV
    61 000000E4 E852FF              <1>  call sd_recv
   194                                    SD_RECV
    61 000000E7 E84FFF              <1>  call sd_recv
   195 000000EA 3CAA                      cmp al, 0xaa
   196 000000EC 7403E90A01                jne .sd_init_fail
   197                                  
   198                                    ;
   199                                    ; send CMD58
   200                                    ;
   201                                  .step_3:
   202                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    45                              <1>  SD_SEND (0x40|%1)
    38 000000F1 50                  <2>  push ax
    39 000000F2 B07A                <2>  mov al, %1
    40 000000F4 E837FF              <2>  call sd_send
    41 000000F7 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 000000F8 50                  <2>  push ax
    39 000000F9 B000                <2>  mov al, %1
    40 000000FB E830FF              <2>  call sd_send
    41 000000FE 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 000000FF 50                  <2>  push ax
    39 00000100 B000                <2>  mov al, %1
    40 00000102 E829FF              <2>  call sd_send
    41 00000105 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 00000106 50                  <2>  push ax
    39 00000107 B000                <2>  mov al, %1
    40 00000109 E822FF              <2>  call sd_send
    41 0000010C 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 0000010D 50                  <2>  push ax
    39 0000010E B000                <2>  mov al, %1
    40 00000110 E81BFF              <2>  call sd_send
    41 00000113 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 00000114 50                  <2>  push ax
    39 00000115 B0CD                <2>  mov al, %1
    40 00000117 E814FF              <2>  call sd_send
    41 0000011A 58                  <2>  pop ax
   203                                  
   204 0000011B B91000                    mov cx, SD_RESP_WAIT
   205                                  .step_3_response:
   206                                    SD_RECV
    61 0000011E E818FF              <1>  call sd_recv
   207 00000121 3C01                      cmp al, 0x01
   208 00000123 7405                      je .step_3_done
   209 00000125 E2F7                      loop .step_3_response
   210 00000127 E9D100                    jmp .sd_init_fail
   211                                  .step_3_done:
   212                                    SD_RECV
    61 0000012A E80CFF              <1>  call sd_recv
   213                                    SD_RECV
    61 0000012D E809FF              <1>  call sd_recv
   214                                    SD_RECV
    61 00000130 E806FF              <1>  call sd_recv
   215                                    SD_RECV
    61 00000133 E803FF              <1>  call sd_recv
   216                                  
   217                                    ;
   218                                    ; send CMD55
   219                                    ;
   220 00000136 B9FFFF                    mov cx, 0xffff
   221                                  .step_4:
   222                                    SD_SEND_CMD 55, 0, 0, 0, 0, 0xcc
    45                              <1>  SD_SEND (0x40|%1)
    38 00000139 50                  <2>  push ax
    39 0000013A B077                <2>  mov al, %1
    40 0000013C E8EFFE              <2>  call sd_send
    41 0000013F 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 00000140 50                  <2>  push ax
    39 00000141 B000                <2>  mov al, %1
    40 00000143 E8E8FE              <2>  call sd_send
    41 00000146 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 00000147 50                  <2>  push ax
    39 00000148 B000                <2>  mov al, %1
    40 0000014A E8E1FE              <2>  call sd_send
    41 0000014D 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 0000014E 50                  <2>  push ax
    39 0000014F B000                <2>  mov al, %1
    40 00000151 E8DAFE              <2>  call sd_send
    41 00000154 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 00000155 50                  <2>  push ax
    39 00000156 B000                <2>  mov al, %1
    40 00000158 E8D3FE              <2>  call sd_send
    41 0000015B 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 0000015C 50                  <2>  push ax
    39 0000015D B0CD                <2>  mov al, %1
    40 0000015F E8CCFE              <2>  call sd_send
    41 00000162 58                  <2>  pop ax
   223 00000163 89CA                      mov dx, cx
   224 00000165 B91000                    mov cx, SD_RESP_WAIT
   225                                  .step_4_response:
   226                                    SD_RECV
    61 00000168 E8CEFE              <1>  call sd_recv
   227 0000016B A8FE                      test al, 0xfe
   228 0000016D 7405                      jz .step_4_done
   229 0000016F E2F7                      loop .step_4_response
   230 00000171 E98700                    jmp .sd_init_fail
   231                                  .step_4_done:
   232                                  
   233                                    ;
   234                                    ; send ACMD41
   235                                    ;
   236                                  .step_5:
   237                                    SD_SEND_CMD 41, 0x40, 0, 0, 0, 0xcc
    45                              <1>  SD_SEND (0x40|%1)
    38 00000174 50                  <2>  push ax
    39 00000175 B069                <2>  mov al, %1
    40 00000177 E8B4FE              <2>  call sd_send
    41 0000017A 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 0000017B 50                  <2>  push ax
    39 0000017C B040                <2>  mov al, %1
    40 0000017E E8ADFE              <2>  call sd_send
    41 00000181 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 00000182 50                  <2>  push ax
    39 00000183 B000                <2>  mov al, %1
    40 00000185 E8A6FE              <2>  call sd_send
    41 00000188 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 00000189 50                  <2>  push ax
    39 0000018A B000                <2>  mov al, %1
    40 0000018C E89FFE              <2>  call sd_send
    41 0000018F 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 00000190 50                  <2>  push ax
    39 00000191 B000                <2>  mov al, %1
    40 00000193 E898FE              <2>  call sd_send
    41 00000196 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 00000197 50                  <2>  push ax
    39 00000198 B0CD                <2>  mov al, %1
    40 0000019A E891FE              <2>  call sd_send
    41 0000019D 58                  <2>  pop ax
   238 0000019E B91000                    mov cx, SD_RESP_WAIT
   239                                  .step_5_response:
   240                                    SD_RECV
    61 000001A1 E895FE              <1>  call sd_recv
   241 000001A4 A8FE                      test al, 0xfe
   242 000001A6 7404                      jz .step_5_done
   243 000001A8 E2F7                      loop .step_5_response
   244 000001AA EB4F                      jmp .sd_init_fail 
   245                                  .step_5_done:
   246                                  
   247                                    ; if R1 response is not IDLE, issue ACMD41 again
   248 000001AC 84C0                      test al, al
   249 000001AE 7404                      jz .step_6  
   250 000001B0 89D1                      mov cx, dx
   251 000001B2 E285                      loop .step_4
   252                                  
   253                                    ;
   254                                    ; send CMD58
   255                                    ;
   256                                  .step_6:
   257                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    45                              <1>  SD_SEND (0x40|%1)
    38 000001B4 50                  <2>  push ax
    39 000001B5 B07A                <2>  mov al, %1
    40 000001B7 E874FE              <2>  call sd_send
    41 000001BA 58                  <2>  pop ax
    46                              <1>  SD_SEND %2
    38 000001BB 50                  <2>  push ax
    39 000001BC B000                <2>  mov al, %1
    40 000001BE E86DFE              <2>  call sd_send
    41 000001C1 58                  <2>  pop ax
    47                              <1>  SD_SEND %3
    38 000001C2 50                  <2>  push ax
    39 000001C3 B000                <2>  mov al, %1
    40 000001C5 E866FE              <2>  call sd_send
    41 000001C8 58                  <2>  pop ax
    48                              <1>  SD_SEND %4
    38 000001C9 50                  <2>  push ax
    39 000001CA B000                <2>  mov al, %1
    40 000001CC E85FFE              <2>  call sd_send
    41 000001CF 58                  <2>  pop ax
    49                              <1>  SD_SEND %5
    38 000001D0 50                  <2>  push ax
    39 000001D1 B000                <2>  mov al, %1
    40 000001D3 E858FE              <2>  call sd_send
    41 000001D6 58                  <2>  pop ax
    50                              <1>  SD_SEND (0x01|%6)
    38 000001D7 50                  <2>  push ax
    39 000001D8 B0CD                <2>  mov al, %1
    40 000001DA E851FE              <2>  call sd_send
    41 000001DD 58                  <2>  pop ax
   258                                  
   259 000001DE B91000                    mov cx, SD_RESP_WAIT
   260                                  .step_6_response:
   261                                    SD_RECV
    61 000001E1 E855FE              <1>  call sd_recv
   262 000001E4 84C0                      test al, al
   263 000001E6 7404                      jz .step_6_done
   264 000001E8 E2F7                      loop .step_6_response
   265 000001EA EB0F                      jmp .sd_init_fail
   266                                  .step_6_done:
   267                                    SD_RECV   ; if &0xc0 then is SDHC
    61 000001EC E84AFE              <1>  call sd_recv
   268                                    SD_RECV
    61 000001EF E847FE              <1>  call sd_recv
   269                                    SD_RECV
    61 000001F2 E844FE              <1>  call sd_recv
   270                                    SD_RECV
    61 000001F5 E841FE              <1>  call sd_recv
   271                                  
   272                                  .sd_init_success:
   273 000001F8 B001                      mov al, 1
   274 000001FA C3                        ret
   275                                  
   276                                  .sd_init_fail:
   277 000001FB B000                      mov al, 0
   278 000001FD C3                        ret
   279                                  
   280                                  ;------------------------------------------------------------------------------
   281                                  ; ax    = sector
   282                                  ; es:bx = dest
   283                                  sd_read_sector:
   284                                  
   285                                    ;
   286                                    ; click generator
   287                                    ;
   288                                  %if USE_CLICKER
   289 000001FE E6BA                      out PORT_CLICK, al
   290                                  %endif
   291                                  
   292                                    ;
   293                                    ; send CMD17
   294                                    ;
   295                                    SD_SEND (0x40|17)
    38 00000200 50                  <1>  push ax
    39 00000201 B051                <1>  mov al, %1
    40 00000203 E828FE              <1>  call sd_send
    41 00000206 58                  <1>  pop ax
   296                                    SD_SEND 0
    38 00000207 50                  <1>  push ax
    39 00000208 B000                <1>  mov al, %1
    40 0000020A E821FE              <1>  call sd_send
    41 0000020D 58                  <1>  pop ax
   297                                    SD_SEND 0
    38 0000020E 50                  <1>  push ax
    39 0000020F B000                <1>  mov al, %1
    40 00000211 E81AFE              <1>  call sd_send
    41 00000214 58                  <1>  pop ax
   298                                    SD_SEND ah
    38 00000215 50                  <1>  push ax
    39 00000216 88E0                <1>  mov al, %1
    40 00000218 E813FE              <1>  call sd_send
    41 0000021B 58                  <1>  pop ax
   299                                    SD_SEND al
    38 0000021C 50                  <1>  push ax
    39 0000021D 88C0                <1>  mov al, %1
    40 0000021F E80CFE              <1>  call sd_send
    41 00000222 58                  <1>  pop ax
   300                                    SD_SEND (0x01|0xcc)
    38 00000223 50                  <1>  push ax
    39 00000224 B0CD                <1>  mov al, %1
    40 00000226 E805FE              <1>  call sd_send
    41 00000229 58                  <1>  pop ax
   301                                  
   302 0000022A 51                        push cx
   303 0000022B B90800                    mov cx, 8
   304                                  .cmd_17_response:
   305                                    SD_RECV
    61 0000022E E808FE              <1>  call sd_recv
   306 00000231 84C0                      test al, al
   307 00000233 7404                      jz .cmd_17_done
   308 00000235 E2F7                      loop .cmd_17_response
   309 00000237 EB33                      jmp .fail
   310                                  .cmd_17_done:
   311                                  
   312                                    ; wait for start of block byte
   313 00000239 B9FF00                    mov cx, 0xff
   314                                  .wait_start:
   315                                    SD_RECV
    61 0000023C E8FAFD              <1>  call sd_recv
   316 0000023F 3CFE                      cmp al, 0xfe
   317 00000241 7404                      je .recv_start
   318 00000243 E2F7                      loop .wait_start
   319 00000245 EB25                      jmp .fail
   320                                  .recv_start:
   321                                  
   322                                    ; read a 512byte block
   323 00000247 B90002                    mov cx, 512
   324                                  .recv_sector:
   325                                    SD_RECV
    61 0000024A E8ECFD              <1>  call sd_recv
   326 0000024D 268807                    mov es:[bx], al
   327 00000250 43                        inc bx
   328 00000251 E2F7                      loop .recv_sector
   329                                  
   330                                    ; clock in CRC
   331                                    SD_SEND 0xff
    38 00000253 50                  <1>  push ax
    39 00000254 B0FF                <1>  mov al, %1
    40 00000256 E8D5FD              <1>  call sd_send
    41 00000259 58                  <1>  pop ax
   332                                    SD_SEND 0xff
    38 0000025A 50                  <1>  push ax
    39 0000025B B0FF                <1>  mov al, %1
    40 0000025D E8CEFD              <1>  call sd_send
    41 00000260 58                  <1>  pop ax
   333                                  
   334                                    ; send additional 8 clocks
   335                                    SD_SEND 0xff
    38 00000261 50                  <1>  push ax
    39 00000262 B0FF                <1>  mov al, %1
    40 00000264 E8C7FD              <1>  call sd_send
    41 00000267 58                  <1>  pop ax
   336                                  
   337                                  .success:
   338 00000268 59                        pop cx
   339 00000269 B001                      mov al, 1
   340 0000026B C3                        ret
   341                                  
   342                                  .fail:
   343 0000026C 59                        pop cx
   344 0000026D B000                      mov al, 0
   345 0000026F C3                        ret
   346                                  
   347                                  
   348                                  ;------------------------------------------------------------------------------
   349                                  ; ax    = sector
   350                                  ; es:bx = src
   351                                  sd_write_sector:
   352                                    ; TODO  https://yaseen.ly/writing-data-to-sdcards-without-a-filesystem-spi/
   353                                  
   354                                    ;
   355                                    ; click generator
   356                                    ;
   357                                  %if USE_CLICKER
   358 00000270 E6BA                      out PORT_CLICK, al
   359                                  %endif
   360                                  
   361                                    ;
   362                                    ; send CMD14
   363                                    ;
   364                                    SD_SEND (0x40|24)
    38 00000272 50                  <1>  push ax
    39 00000273 B058                <1>  mov al, %1
    40 00000275 E8B6FD              <1>  call sd_send
    41 00000278 58                  <1>  pop ax
   365                                    SD_SEND 0
    38 00000279 50                  <1>  push ax
    39 0000027A B000                <1>  mov al, %1
    40 0000027C E8AFFD              <1>  call sd_send
    41 0000027F 58                  <1>  pop ax
   366                                    SD_SEND 0
    38 00000280 50                  <1>  push ax
    39 00000281 B000                <1>  mov al, %1
    40 00000283 E8A8FD              <1>  call sd_send
    41 00000286 58                  <1>  pop ax
   367                                    SD_SEND ah
    38 00000287 50                  <1>  push ax
    39 00000288 88E0                <1>  mov al, %1
    40 0000028A E8A1FD              <1>  call sd_send
    41 0000028D 58                  <1>  pop ax
   368                                    SD_SEND al
    38 0000028E 50                  <1>  push ax
    39 0000028F 88C0                <1>  mov al, %1
    40 00000291 E89AFD              <1>  call sd_send
    41 00000294 58                  <1>  pop ax
   369                                    SD_SEND (0x01|0xcc)
    38 00000295 50                  <1>  push ax
    39 00000296 B0CD                <1>  mov al, %1
    40 00000298 E893FD              <1>  call sd_send
    41 0000029B 58                  <1>  pop ax
   370                                  
   371 0000029C 51                        push cx
   372 0000029D B90800                    mov cx, 8
   373                                  .cmd_24_response:
   374                                    SD_RECV
    61 000002A0 E896FD              <1>  call sd_recv
   375 000002A3 84C0                      test al, al
   376 000002A5 7404                      jz .cmd_24_done
   377 000002A7 E2F7                      loop .cmd_24_response
   378 000002A9 EB39                      jmp .fail
   379                                  .cmd_24_done:
   380                                  
   381                                    ; send the start token
   382                                    SD_SEND 0xFE
    38 000002AB 50                  <1>  push ax
    39 000002AC B0FE                <1>  mov al, %1
    40 000002AE E87DFD              <1>  call sd_send
    41 000002B1 58                  <1>  pop ax
   383                                  
   384                                    ; write a 512byte block
   385 000002B2 B90002                    mov cx, 512
   386                                  .send_sector:
   387 000002B5 268A07                    mov al, es:[bx]
   388                                    SD_SEND al
    38 000002B8 50                  <1>  push ax
    39 000002B9 88C0                <1>  mov al, %1
    40 000002BB E870FD              <1>  call sd_send
    41 000002BE 58                  <1>  pop ax
   389 000002BF 43                        inc bx
   390 000002C0 E2F3                      loop .send_sector
   391                                  
   392                                    ; clock in CRC
   393                                    SD_SEND 0xff
    38 000002C2 50                  <1>  push ax
    39 000002C3 B0FF                <1>  mov al, %1
    40 000002C5 E866FD              <1>  call sd_send
    41 000002C8 58                  <1>  pop ax
   394                                    SD_SEND 0xff
    38 000002C9 50                  <1>  push ax
    39 000002CA B0FF                <1>  mov al, %1
    40 000002CC E85FFD              <1>  call sd_send
    41 000002CF 58                  <1>  pop ax
   395                                  
   396                                    ; check if the data was accepted
   397                                    SD_RECV
    61 000002D0 E866FD              <1>  call sd_recv
   398 000002D3 241F                      and al, 0x1f
   399 000002D5 3C05                      cmp al, 5
   400 000002D7 750B                      jne .fail
   401                                  
   402                                    ; wait for card to become ready
   403                                  .cmd_24_wait_for_ready:
   404                                    SD_RECV
    61 000002D9 E85DFD              <1>  call sd_recv
   405 000002DC 84C0                      test al, al
   406 000002DE 74F9                      jz .cmd_24_wait_for_ready
   407                                  .cmd_24_now_ready:
   408                                  
   409                                  .success:
   410 000002E0 59                        pop cx
   411 000002E1 B001                      mov al, 1
   412 000002E3 C3                        ret
   413                                  
   414                                  .fail:
   415 000002E4 59                        pop cx
   416 000002E5 B000                      mov al, 0
   417 000002E7 C3                        ret
   418                                  
   419                                  %if USE_HDD
   420                                  ;------------------------------------------------------------------------------
   421                                  ; lba = (cylinder * HEADS + head) * SECTORS + sector;
   422                                  ;   ch    - cylinder  (64)
   423                                  ;   cl    - sector    (63)
   424                                  ;   dh    - head      (16)
   425                                  chs_to_lba_hdd:
   426 000002E8 53                        push bx
   427 000002E9 52                        push dx
   428 000002EA 51                        push cx
   429 000002EB 31C0                      xor ax, ax    ; accum = 0
   430 000002ED 88E8                      mov al, ch
   431 000002EF D1E0                      shl ax, 1
   432 000002F1 D1E0                      shl ax, 1
   433 000002F3 D1E0                      shl ax, 1
   434 000002F5 D1E0                      shl ax, 1     ; accum = cylinder * 16
   435 000002F7 88F2                      mov dl, dh
   436 000002F9 30F6                      xor dh, dh
   437 000002FB 01D0                      add ax, dx    ; accum += head
   438 000002FD 89C3                      mov bx, ax
   439 000002FF D1E0                      shl ax, 1
   440 00000301 D1E0                      shl ax, 1
   441 00000303 D1E0                      shl ax, 1
   442 00000305 D1E0                      shl ax, 1
   443 00000307 D1E0                      shl ax, 1
   444 00000309 89C2                      mov dx, ax
   445 0000030B 29DA                      sub dx, bx    ; note: sub early to avoid overflow
   446 0000030D 01D0                      add ax, dx    ; accum *= 63
   447 0000030F 30ED                      xor ch, ch
   448 00000311 49                        dec cx
   449 00000312 01C8                      add ax, cx    ; accum += (sector - 1)
   450 00000314 59                        pop cx
   451 00000315 5A                        pop dx
   452 00000316 5B                        pop bx
   453 00000317 C3                        ret
   454                                  %else
   455                                  ;------------------------------------------------------------------------------
   456                                  ; lba = (cylinder * HEADS + head) * SECTORS + sector;
   457                                  ;   ch    - cylinder  (80)
   458                                  ;   cl    - sector    (18)
   459                                  ;   dh    - head      (2)
   460                                  chs_to_lba_fdd:
   461                                    push bx
   462                                    push dx
   463                                    push cx
   464                                    xor ax, ax
   465                                    mov al, ch
   466                                    add ax, ax    ; acum = cylinder * 2
   467                                    xor ch, ch    ; ch is no longer needed
   468                                    mov dl, dh
   469                                    xor dh, dh    ; dx  = head
   470                                    add ax, dx    ; accum += head
   471                                    shl ax, 1
   472                                    mov bx, ax    ; bx = accum * 2
   473                                    shl ax, 1
   474                                    shl ax, 1
   475                                    shl ax, 1
   476                                    add ax, bx    ; accum *= 18
   477                                    dec cx
   478                                    add ax, cx    ; accum += (sector - 1)
   479                                    pop cx
   480                                    pop dx
   481                                    pop bx
   482                                    ret
   483                                  %endif
   484                                  
   485                                  ;------------------------------------------------------------------------------
   486                                  int13:
   487                                  
   488                                    ; out 0xbc, ax
   489                                    ; iret
   490                                  
   491                                    ; out 0xb0, ax  ; enable debugging
   492                                  
   493 00000318 FA                        cli
   494                                  
   495 00000319 52                        push dx
   496 0000031A 51                        push cx
   497 0000031B 53                        push bx
   498 0000031C 50                        push ax
   499                                  
   500                                  %if USE_HDD
   501                                    ; without this check the floppy will be checked first
   502 0000031D 80FA80                    cmp dl, 0x80
   503 00000320 7523                      jne .not_hdd
   504                                  %endif
   505                                  
   506                                    ; dispatch to specific handler
   507 00000322 80FC02                    cmp ah, 0x02
   508 00000325 742D                      je int13_02
   509 00000327 80FC03                    cmp ah, 0x03
   510 0000032A 7448                      je int13_03
   511 0000032C 80FC00                    cmp ah, 0x00
   512 0000032F 7419                      je int13_00
   513 00000331 80FC01                    cmp ah, 0x01
   514 00000334 7419                      je int13_01
   515 00000336 80FC08                    cmp ah, 0x08
   516 00000339 7464                      je int13_08
   517 0000033B 80FC15                    cmp ah, 0x15
   518 0000033E 7473                      je int13_15
   519                                  
   520 00000340 B400                      mov ah, ERR_SUCCESS
   521 00000342 F8                        clc             ; CF = 0
   522 00000343 EB77                      jmp int13_exit
   523                                  
   524                                  .not_hdd:
   525 00000345 B401                      mov ah, 1
   526 00000347 F9                        stc             ; CF = 1
   527 00000348 EB72                      jmp int13_exit
   528                                  
   529                                  ;------------------------------------------------------------------------------
   530                                  ; Reset disk system
   531                                  int13_00:
   532 0000034A B400                      mov ah, ERR_SUCCESS
   533 0000034C F8                        clc             ; CF = 0
   534 0000034D EB6D                      jmp int13_exit
   535                                  
   536                                  ;------------------------------------------------------------------------------
   537                                  ; Get status of last drive operation
   538                                  int13_01:
   539 0000034F B400                      mov ah, ERR_SUCCESS
   540                                    ; TODO: set AH with the last error code
   541 00000351 F8                        clc             ; CF = 0
   542 00000352 EB68                      jmp int13_exit
   543                                  
   544                                  ;------------------------------------------------------------------------------
   545                                  ; Read Sectors From Drive
   546                                  ;   al    - sectors to read
   547                                  ;   ch    - cylinder
   548                                  ;   cl    - sector
   549                                  ;   dh    - head
   550                                  ;   dl    - drive
   551                                  ;   es:bx - buffer
   552                                  int13_02:
   553 00000354 50                        push ax
   554                                  %if USE_HDD
   555 00000355 E890FF                    call chs_to_lba_hdd
   556                                  %else
   557                                    call chs_to_lba_fdd
   558                                  %endif
   559 00000358 59                        pop cx
   560 00000359 30ED                      xor ch, ch
   561 0000035B 51                        push cx
   562                                  
   563                                  .int13_02_read_sector:
   564 0000035C 50                        push ax                 ; preserve sector number
   565 0000035D E89EFE                    call sd_read_sector
   566 00000360 84C0                      test al, al
   567 00000362 740A                      jz .int13_02_fail
   568 00000364 58                        pop ax                  ; restore sector number
   569 00000365 40                        inc ax                  ; advance to the next sector
   570 00000366 E2F4                      loop .int13_02_read_sector
   571                                  
   572 00000368 58                        pop ax                  ; al = sectors read
   573 00000369 B400                      mov ah, ERR_SUCCESS
   574 0000036B F8                        clc                     ; CF = 0
   575 0000036C EB4E                      jmp int13_exit
   576                                  
   577                                  .int13_02_fail:
   578 0000036E 59                        pop cx                  ; cx was left on the stack so pop it
   579 0000036F B4AA                      mov ah, ERR_NOT_READY
   580 00000371 F9                        stc
   581 00000372 EB48                      jmp int13_exit
   582                                  
   583                                  ;------------------------------------------------------------------------------
   584                                  ; Write Sectors to Drive
   585                                  ;   al    - sectors to write
   586                                  ;   ch    - cylinder
   587                                  ;   cl    - sector
   588                                  ;   dh    - head
   589                                  ;   dl    - drive
   590                                  ;   es:bx - buffer
   591                                  int13_03:
   592                                    ;out 0xb0, ax  ; turn on debugging
   593 00000374 50                        push ax
   594                                  %if USE_HDD
   595 00000375 E870FF                    call chs_to_lba_hdd
   596                                  %else
   597                                    call chs_to_lba_fdd
   598                                  %endif
   599 00000378 59                        pop cx
   600 00000379 30ED                      xor ch, ch              ; isolate just the sectors to write
   601 0000037B 51                        push cx                 ; push number of sectors to write
   602                                  
   603                                  .int13_03_write_sector:
   604 0000037C 50                        push ax
   605 0000037D E8F0FE                    call sd_write_sector
   606 00000380 84C0                      test al, al
   607 00000382 740A                      jz .int13_03_fail
   608 00000384 58                        pop ax                  ; restore sector number
   609 00000385 40                        inc ax                  ; advance to the next sector
   610 00000386 E2F4                      loop .int13_03_write_sector
   611                                  
   612 00000388 58                        pop ax                  ; al = sectors written
   613 00000389 B400                      mov ah, ERR_SUCCESS
   614 0000038B F8                        clc                     ; CF = 0
   615 0000038C EB2E                      jmp int13_exit
   616                                  
   617                                  .int13_03_fail:
   618 0000038E 59                        pop cx                  ; cx was left on the stack so pop it
   619 0000038F B4AA                      mov ah, ERR_NOT_READY
   620 00000391 F9                        stc
   621 00000392 EB28                      jmp int13_exit
   622                                  
   623                                  ;------------------------------------------------------------------------------
   624                                  ; Disk base table (only needed for floppies)
   625                                  disk_base_table:
   626 00000394 CF                        db 11001111b
   627 00000395 02                        db 2
   628 00000396 25                        db 25h
   629 00000397 02                        db 2           ; 2 - 512 bytes
   630 00000398 11                        db 17          ; sectors per track (last sector number)
   631 00000399 2A                        db 2Ah
   632 0000039A FF                        db 0FFh
   633 0000039B 50                        db 50h
   634 0000039C F6                        db 0F6h
   635 0000039D 19                        db 19h
   636 0000039E 04                        db 4
   637                                  
   638                                  ;------------------------------------------------------------------------------
   639                                  ; Get drive parameters
   640                                  int13_08:
   641                                  %if USE_HDD == 0
   642                                    ; disk base table is only needed for floppies
   643                                    mov ax, cs
   644                                    mov es, ax
   645                                    mov di, disk_base_table
   646                                  %endif
   647 0000039F 58                        pop ax
   648 000003A0 5B                        pop bx
   649 000003A1 59                        pop cx
   650 000003A2 5A                        pop dx
   651                                  %if USE_HDD
   652 000003A3 B53F                      mov ch, 63
   653 000003A5 B13F                      mov cl, 63
   654 000003A7 B60F                      mov dh, 15
   655 000003A9 B201                      mov dl, 1
   656 000003AB BB0000                    mov bx, 0
   657                                  %else
   658                                    mov bl, 4       ; 1.44Mb disk
   659                                    mov ch, 80      ; cylinders
   660                                    mov cl, 18      ; sectors
   661                                    mov dh, 1       ; sides (zero based)
   662                                    mov dl, 1       ; number of drives attached
   663                                  %endif
   664 000003AE B400                      mov ah, ERR_SUCCESS
   665 000003B0 F8                        clc             ; CF = 0
   666 000003B1 EB13                      jmp int32_exit_cf
   667                                  
   668                                  ;------------------------------------------------------------------------------
   669                                  ; Read disk type
   670                                  int13_15:
   671 000003B3 58                        pop ax
   672 000003B4 5B                        pop bx
   673 000003B5 59                        pop cx
   674 000003B6 5A                        pop dx
   675 000003B7 B401                      mov ah, 1       ; diskette no change detection present
   676 000003B9 F8                        clc             ; CF = 0
   677 000003BA EB0A                      jmp int32_exit_cf
   678                                  
   679                                  ;------------------------------------------------------------------------------
   680                                  int13_exit:
   681                                    ; fix return code as some functions need to return values
   682                                    ;
   683                                    ; 02 need to return in AL
   684                                    ; AH has status code
   685                                    ; can we move the value to the stack before it gets popd?
   686                                  
   687 000003BC 88E7                      mov bh, ah
   688 000003BE 58                        pop ax
   689 000003BF 88FC                      mov ah, bh
   690 000003C1 5B                        pop bx
   691 000003C2 59                        pop cx
   692 000003C3 5A                        pop dx
   693 000003C4 EB00                      jmp int32_exit_cf
   694                                  
   695                                  ;------------------------------------------------------------------------------
   696                                  ; return from interrupt but propagate the carry flag
   697                                  int32_exit_cf:
   698 000003C6 7210                      jb  .int32_exit_cf1
   699 000003C8 56                        push si
   700 000003C9 89E6                      mov si, sp
   701 000003CB 83C606                    add si, 6
   702 000003CE 368024FE                  and byte ss:[si], 0xfe
   703 000003D2 83EE06                    sub si, 6
   704 000003D5 5E                        pop si
   705 000003D6 FB                        sti
   706                                    ;out 0xb2, ax  ; turn off debugging
   707 000003D7 CF                        iret
   708                                  .int32_exit_cf1:
   709 000003D8 56                        push si
   710 000003D9 89E6                      mov si, sp
   711 000003DB 83C606                    add si, 6
   712 000003DE 36800C01                  or byte ss:[si], 1
   713 000003E2 83EE06                    sub si, 6
   714 000003E5 5E                        pop si
   715 000003E6 FB                        sti
   716                                    ;out 0xb2, ax  ; turn off debugging
   717 000003E7 CF                        iret
