     1                                  ;     _          _  ________
     2                                  ;    (_)_______ | |/ /_  __/
     3                                  ;   / / ___/ _ \|   / / /
     4                                  ;  / / /__/  __/   | / /
     5                                  ; /_/\___/\___/_/|_|/_/
     6                                  ;
     7                                  cpu 8086
     8                                  org 0
     9                                  [BITS 16]
    10                                  
    11                                  
    12                                  %define PORT_DEBUG    0xb0
    13                                  %define PORT_SPI_DATA 0xb8
    14                                  %define PORT_SPI_CTRL 0xb9
    15                                  
    16                                  %define SD_DUMMY_CLOCKS 10
    17                                  %define SD_SEND_DELAY   20
    18                                  
    19                                  %define ERR_SUCCESS     0x00
    20                                  %define ERR_NOT_READY   0xaa
    21                                  %define ERR_INVALID_CMD 0x01
    22                                  
    23                                  %macro SD_SEND 1
    24                                    mov al, %1
    25                                    call sd_send
    26                                  %endmacro
    27                                  
    28                                  %macro SD_SEND_CMD 6
    29                                    SD_SEND (0x40|%1)
    30                                    SD_SEND %2
    31                                    SD_SEND %3
    32                                    SD_SEND %4
    33                                    SD_SEND %5
    34                                    SD_SEND (0x01|%6)
    35                                  %endmacro
    36                                  
    37                                  %macro SD_DUMMY_BYTE 0
    38                                    mov al, 0xff
    39                                    call sd_send
    40                                  %endmacro
    41                                  
    42                                  %macro SD_RECV 0
    43                                    call sd_recv
    44                                  %endmacro
    45                                  
    46                                  %macro SD_CS 1
    47                                    mov al, %1
    48                                    call sd_set_cs
    49                                  %endmacro
    50                                  
    51                                  ;------------------------------------------------------------------------------
    52                                  signature:
    53 00000000 55AA                      db 0x55, 0xAA
    54 00000002 04                        db 0x4
    55                                  
    56                                  ;------------------------------------------------------------------------------
    57                                  rom_entry:
    58 00000003 50                        push ax
    59 00000004 53                        push bx
    60 00000005 51                        push cx
    61 00000006 52                        push dx
    62 00000007 57                        push di
    63 00000008 56                        push si
    64 00000009 1E                        push ds
    65 0000000A E83A00                    call sd_init
    66 0000000D 84C0                      test al, al
    67 0000000F 7403                      jz .rom_entry_fail
    68 00000011 E80800                    call install_int13
    69                                  .rom_entry_fail:
    70 00000014 1F                        pop ds
    71 00000015 5E                        pop si
    72 00000016 5F                        pop di
    73 00000017 5A                        pop dx
    74 00000018 59                        pop cx
    75 00000019 5B                        pop bx
    76 0000001A 58                        pop ax
    77 0000001B CB                        retf
    78                                  
    79                                  ;------------------------------------------------------------------------------
    80                                  install_int13:
    81 0000001C B80000                    mov ax, 0
    82 0000001F 8ED8                      mov ds, ax
    83 00000021 3E8C0E4E00                mov ds:[0x4e], cs
    84 00000026 B8[2102]                  mov ax, int13
    85 00000029 3EA34C00                  mov ds:[0x4c], ax
    86 0000002D C3                        ret
    87                                  
    88                                  ;------------------------------------------------------------------------------
    89                                  debug:
    90 0000002E E6B0                      out PORT_DEBUG, al
    91 00000030 C3                        ret
    92                                  
    93                                  ;------------------------------------------------------------------------------
    94                                  sd_send:
    95 00000031 E6B8                      out PORT_SPI_DATA, al
    96 00000033 51                        push cx
    97 00000034 B91400                    mov cx, SD_SEND_DELAY
    98                                  .delay:
    99 00000037 90                        nop
   100 00000038 E2FD                      loop .delay
   101 0000003A 59                        pop cx
   102 0000003B C3                        ret
   103                                  
   104                                  ;------------------------------------------------------------------------------
   105                                  sd_recv:
   106 0000003C B0FF                      mov al, 0xff
   107 0000003E E8F0FF                    call sd_send
   108 00000041 E4B8                      in al, PORT_SPI_DATA
   109 00000043 C3                        ret
   110                                  
   111                                  ;------------------------------------------------------------------------------
   112                                  sd_set_cs:
   113 00000044 E6B9                      out PORT_SPI_CTRL, al
   114 00000046 C3                        ret
   115                                  
   116                                  ;------------------------------------------------------------------------------
   117                                  sd_init:
   118                                  
   119                                    ;
   120                                    ; deassert SD card
   121                                    ;
   122                                    SD_CS 1
    47 00000047 B001                <1>  mov al, %1
    48 00000049 E8F8FF              <1>  call sd_set_cs
   123                                  
   124                                    ;
   125                                    ; send dummy clocks
   126                                    ;
   127 0000004C B90A00                    mov cx, SD_DUMMY_CLOCKS
   128                                  .dummy_clocks:
   129                                    SD_DUMMY_BYTE
    38 0000004F B0FF                <1>  mov al, 0xff
    39 00000051 E8DDFF              <1>  call sd_send
   130 00000054 E2F9                      loop .dummy_clocks
   131                                  
   132                                    ;
   133                                    ; assert SD card
   134                                    ;
   135                                    SD_CS 0
    47 00000056 B000                <1>  mov al, %1
    48 00000058 E8E9FF              <1>  call sd_set_cs
   136                                  
   137                                    ;
   138                                    ; send CMD0 (go idle)
   139                                    ;
   140                                  .step_1:
   141                                    SD_SEND_CMD 0, 0, 0, 0, 0, 0x95
    29                              <1>  SD_SEND (0x40|%1)
    24 0000005B B040                <2>  mov al, %1
    25 0000005D E8D1FF              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 00000060 B000                <2>  mov al, %1
    25 00000062 E8CCFF              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 00000065 B000                <2>  mov al, %1
    25 00000067 E8C7FF              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 0000006A B000                <2>  mov al, %1
    25 0000006C E8C2FF              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 0000006F B000                <2>  mov al, %1
    25 00000071 E8BDFF              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 00000074 B095                <2>  mov al, %1
    25 00000076 E8B8FF              <2>  call sd_send
   142                                  
   143 00000079 B90800                    mov cx, 8
   144                                  .step_1_response:
   145                                    SD_RECV
    43 0000007C E8BDFF              <1>  call sd_recv
   146 0000007F 3C01                      cmp al, 0x01
   147 00000081 7405                      je .step_1_done
   148 00000083 E2F7                      loop .step_1_response
   149 00000085 E92301                    jmp .sd_init_fail
   150                                  .step_1_done:
   151                                  
   152                                    SD_DUMMY_BYTE
    38 00000088 B0FF                <1>  mov al, 0xff
    39 0000008A E8A4FF              <1>  call sd_send
   153                                    SD_DUMMY_BYTE
    38 0000008D B0FF                <1>  mov al, 0xff
    39 0000008F E89FFF              <1>  call sd_send
   154                                  
   155                                    ;
   156                                    ; send CMD8
   157                                    ;
   158                                  .step_2:
   159                                    SD_SEND_CMD 8, 0, 0, 1, 0xaa, 0x86
    29                              <1>  SD_SEND (0x40|%1)
    24 00000092 B048                <2>  mov al, %1
    25 00000094 E89AFF              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 00000097 B000                <2>  mov al, %1
    25 00000099 E895FF              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 0000009C B000                <2>  mov al, %1
    25 0000009E E890FF              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 000000A1 B001                <2>  mov al, %1
    25 000000A3 E88BFF              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 000000A6 B0AA                <2>  mov al, %1
    25 000000A8 E886FF              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 000000AB B087                <2>  mov al, %1
    25 000000AD E881FF              <2>  call sd_send
   160                                  
   161 000000B0 B90800                    mov cx, 8
   162                                  .step_2_response:
   163                                    SD_RECV
    43 000000B3 E886FF              <1>  call sd_recv
   164 000000B6 3C01                      cmp al, 0x01
   165 000000B8 7405                      je .step_2_done
   166 000000BA E2F7                      loop .step_2_response
   167 000000BC E9EC00                    jmp .sd_init_fail
   168                                  .step_2_done:
   169                                    SD_RECV
    43 000000BF E87AFF              <1>  call sd_recv
   170                                    SD_RECV
    43 000000C2 E877FF              <1>  call sd_recv
   171                                    SD_RECV
    43 000000C5 E874FF              <1>  call sd_recv
   172                                    SD_RECV
    43 000000C8 E871FF              <1>  call sd_recv
   173 000000CB 3CAA                      cmp al, 0xaa
   174 000000CD 7403E9D900                jnz .sd_init_fail
   175                                  
   176                                    ;
   177                                    ; send CMD58
   178                                    ;
   179                                  .step_3:
   180                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    29                              <1>  SD_SEND (0x40|%1)
    24 000000D2 B07A                <2>  mov al, %1
    25 000000D4 E85AFF              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 000000D7 B000                <2>  mov al, %1
    25 000000D9 E855FF              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 000000DC B000                <2>  mov al, %1
    25 000000DE E850FF              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 000000E1 B000                <2>  mov al, %1
    25 000000E3 E84BFF              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 000000E6 B000                <2>  mov al, %1
    25 000000E8 E846FF              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 000000EB B0CD                <2>  mov al, %1
    25 000000ED E841FF              <2>  call sd_send
   181                                  
   182 000000F0 B90800                    mov cx, 8
   183                                  .step_3_response:
   184                                    SD_RECV
    43 000000F3 E846FF              <1>  call sd_recv
   185 000000F6 3C01                      cmp al, 0x01
   186 000000F8 7405                      je .step_3_done
   187 000000FA E2F7                      loop .step_3_response
   188 000000FC E9AC00                    jmp .sd_init_fail
   189                                  .step_3_done:
   190                                    SD_RECV
    43 000000FF E83AFF              <1>  call sd_recv
   191                                    SD_RECV
    43 00000102 E837FF              <1>  call sd_recv
   192                                    SD_RECV
    43 00000105 E834FF              <1>  call sd_recv
   193                                    SD_RECV
    43 00000108 E831FF              <1>  call sd_recv
   194                                  
   195                                    ;
   196                                    ; send CMD55
   197                                    ;
   198 0000010B B9FFFF                    mov cx, 0xffff
   199                                  .step_4:
   200                                    SD_SEND_CMD 55, 0, 0, 0, 0, 0xcc
    29                              <1>  SD_SEND (0x40|%1)
    24 0000010E B077                <2>  mov al, %1
    25 00000110 E81EFF              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 00000113 B000                <2>  mov al, %1
    25 00000115 E819FF              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 00000118 B000                <2>  mov al, %1
    25 0000011A E814FF              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 0000011D B000                <2>  mov al, %1
    25 0000011F E80FFF              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 00000122 B000                <2>  mov al, %1
    25 00000124 E80AFF              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 00000127 B0CD                <2>  mov al, %1
    25 00000129 E805FF              <2>  call sd_send
   201 0000012C 89CA                      mov dx, cx
   202 0000012E B90800                    mov cx, 8
   203                                  .step_4_response:
   204                                    SD_RECV
    43 00000131 E808FF              <1>  call sd_recv
   205 00000134 A8FE                      test al, 0xfe
   206 00000136 7404                      jz .step_4_done
   207 00000138 E2F7                      loop .step_4_response
   208 0000013A EB6F                      jmp .sd_init_fail
   209                                  .step_4_done:
   210                                  
   211                                    ;
   212                                    ; send ACMD41
   213                                    ;
   214                                  .step_5:
   215                                    SD_SEND_CMD 41, 0x40, 0, 0, 0, 0xcc
    29                              <1>  SD_SEND (0x40|%1)
    24 0000013C B069                <2>  mov al, %1
    25 0000013E E8F0FE              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 00000141 B040                <2>  mov al, %1
    25 00000143 E8EBFE              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 00000146 B000                <2>  mov al, %1
    25 00000148 E8E6FE              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 0000014B B000                <2>  mov al, %1
    25 0000014D E8E1FE              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 00000150 B000                <2>  mov al, %1
    25 00000152 E8DCFE              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 00000155 B0CD                <2>  mov al, %1
    25 00000157 E8D7FE              <2>  call sd_send
   216 0000015A B90800                    mov cx, 8
   217                                  .step_5_response:
   218                                    SD_RECV
    43 0000015D E8DCFE              <1>  call sd_recv
   219 00000160 A8FE                      test al, 0xfe
   220 00000162 7404                      jz .step_5_done
   221 00000164 E2F7                      loop .step_5_response
   222 00000166 EB43                      jmp .sd_init_fail 
   223                                  .step_5_done:
   224                                  
   225                                    ; if R1 response is not IDLE, issue ACMD41 again
   226 00000168 84C0                      test al, al
   227 0000016A 7404                      jz .step_6  
   228 0000016C 89D1                      mov cx, dx
   229 0000016E E29E                      loop .step_4
   230                                  
   231                                    ;
   232                                    ; send CMD58
   233                                    ;
   234                                  .step_6:
   235                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    29                              <1>  SD_SEND (0x40|%1)
    24 00000170 B07A                <2>  mov al, %1
    25 00000172 E8BCFE              <2>  call sd_send
    30                              <1>  SD_SEND %2
    24 00000175 B000                <2>  mov al, %1
    25 00000177 E8B7FE              <2>  call sd_send
    31                              <1>  SD_SEND %3
    24 0000017A B000                <2>  mov al, %1
    25 0000017C E8B2FE              <2>  call sd_send
    32                              <1>  SD_SEND %4
    24 0000017F B000                <2>  mov al, %1
    25 00000181 E8ADFE              <2>  call sd_send
    33                              <1>  SD_SEND %5
    24 00000184 B000                <2>  mov al, %1
    25 00000186 E8A8FE              <2>  call sd_send
    34                              <1>  SD_SEND (0x01|%6)
    24 00000189 B0CD                <2>  mov al, %1
    25 0000018B E8A3FE              <2>  call sd_send
   236                                  
   237 0000018E B90800                    mov cx, 8
   238                                  .step_6_response:
   239                                    SD_RECV
    43 00000191 E8A8FE              <1>  call sd_recv
   240 00000194 84C0                      test al, al
   241 00000196 7404                      jz .step_6_done
   242 00000198 E2F7                      loop .step_6_response
   243 0000019A EB0F                      jmp .sd_init_fail
   244                                  .step_6_done:
   245                                    SD_RECV   ; if &0xc0 then is SDHC
    43 0000019C E89DFE              <1>  call sd_recv
   246                                    SD_RECV
    43 0000019F E89AFE              <1>  call sd_recv
   247                                    SD_RECV
    43 000001A2 E897FE              <1>  call sd_recv
   248                                    SD_RECV
    43 000001A5 E894FE              <1>  call sd_recv
   249                                  
   250                                  .sd_init_success:
   251 000001A8 B001                      mov al, 1
   252 000001AA C3                        ret
   253                                  
   254                                  .sd_init_fail:
   255 000001AB B000                      mov al, 0
   256 000001AD C3                        ret
   257                                  
   258                                  ;------------------------------------------------------------------------------
   259                                  ; ax    = sector
   260                                  ; es:bx = dest
   261                                  sd_read_sector:
   262                                  
   263                                    ;
   264                                    ; send CMD17
   265                                    ;
   266                                    SD_SEND (0x40|17)
    24 000001AE B051                <1>  mov al, %1
    25 000001B0 E87EFE              <1>  call sd_send
   267                                    SD_SEND 0
    24 000001B3 B000                <1>  mov al, %1
    25 000001B5 E879FE              <1>  call sd_send
   268                                    SD_SEND 0
    24 000001B8 B000                <1>  mov al, %1
    25 000001BA E874FE              <1>  call sd_send
   269                                    SD_SEND ah
    24 000001BD 88E0                <1>  mov al, %1
    25 000001BF E86FFE              <1>  call sd_send
   270                                    SD_SEND al
    24 000001C2 88C0                <1>  mov al, %1
    25 000001C4 E86AFE              <1>  call sd_send
   271                                    SD_SEND (0x01|0xcc)
    24 000001C7 B0CD                <1>  mov al, %1
    25 000001C9 E865FE              <1>  call sd_send
   272                                  
   273 000001CC 51                        push cx
   274 000001CD B90800                    mov cx, 8
   275                                  .cmd_17_response:
   276                                    SD_RECV
    43 000001D0 E869FE              <1>  call sd_recv
   277 000001D3 84C0                      test al, al
   278 000001D5 7404                      jz .cmd_17_done
   279 000001D7 E2F7                      loop .cmd_17_response
   280 000001D9 EB1E                      jmp .fail
   281                                  .cmd_17_done:
   282                                  
   283                                    ; wait for start of block byte
   284 000001DB B9FF00                    mov cx, 0xff
   285                                  .wait_start:
   286                                    SD_RECV
    43 000001DE E85BFE              <1>  call sd_recv
   287 000001E1 3CFE                      cmp al, 0xfe
   288 000001E3 7407                      je .recv_sector
   289 000001E5 E2F7                      loop .wait_start
   290 000001E7 EB10                      jmp .fail
   291                                  
   292                                    ; read a 512byte block
   293 000001E9 B90002                    mov cx, 0x200
   294                                  .recv_sector:
   295                                    SD_RECV
    43 000001EC E84DFE              <1>  call sd_recv
   296 000001EF 268807                    mov es:[bx], al
   297 000001F2 43                        inc bx
   298 000001F3 E2F7                      loop .recv_sector
   299                                  
   300                                  .success:
   301 000001F5 59                        pop cx
   302 000001F6 B001                      mov al, 1
   303 000001F8 C3                        ret
   304                                  
   305                                  .fail:
   306 000001F9 59                        pop cx
   307 000001FA B000                      mov al, 0
   308 000001FC C3                        ret
   309                                  
   310                                  ;------------------------------------------------------------------------------
   311                                  ;  const uint32_t lba = (cylinder * HEADS + head) * SECTORS + sector;
   312                                  ;   ch    - cylinder  (80)
   313                                  ;   cl    - sector    (18)
   314                                  ;   dh    - head      (2)
   315                                  chs_to_lba:
   316 000001FD 53                        push bx
   317 000001FE 52                        push dx
   318 000001FF 51                        push cx
   319 00000200 31C0                      xor ax, ax
   320 00000202 88E8                      mov al, ch
   321 00000204 01C0                      add ax, ax    ; ax = cylinder * 2
   322 00000206 30ED                      xor ch, ch    ; ch is no longer needed
   323 00000208 88F2                      mov dl, dh
   324 0000020A 30F6                      xor dh, dh    ; move dh into dx
   325 0000020C 01D0                      add ax, dx    ; ax += head
   326 0000020E D1E0                      shl ax, 1
   327 00000210 89C3                      mov bx, ax
   328 00000212 D1E0                      shl ax, 1
   329 00000214 D1E0                      shl ax, 1
   330 00000216 D1E0                      shl ax, 1
   331 00000218 01D8                      add ax, bx    ; ax *= 18
   332 0000021A 49                        dec cx
   333 0000021B 01C8                      add ax, cx    ; ax += (sector - 1)
   334 0000021D 59                        pop cx
   335 0000021E 5A                        pop dx
   336 0000021F 5B                        pop bx
   337 00000220 C3                        ret
   338                                  
   339                                  ;------------------------------------------------------------------------------
   340                                  int13:
   341 00000221 FA                        cli
   342                                    ;out 0xba, ax
   343                                    ;sti
   344                                    ;iret
   345                                    
   346 00000222 50                        push ax
   347 00000223 51                        push cx
   348 00000224 52                        push dx
   349 00000225 53                        push bx
   350                                  
   351                                    ; dispatch to specific handler
   352 00000226 80FC02                    cmp ah, 0x02
   353 00000229 7414                      je int13_02
   354 0000022B 80FC00                    cmp ah, 0x00
   355 0000022E 740A                      je int13_00
   356 00000230 80FC08                    cmp ah, 0x08
   357 00000233 742E                      je int13_08
   358                                  
   359 00000235 B400                      mov ah, ERR_SUCCESS
   360 00000237 F8                        clc             ; CF = 0
   361 00000238 EB36                      jmp int13_exit
   362                                  
   363                                  ;------------------------------------------------------------------------------
   364                                  int13_00:
   365 0000023A B400                      mov ah, ERR_SUCCESS
   366 0000023C F8                        clc             ; CF = 0
   367 0000023D EB31                      jmp int13_exit
   368                                  
   369                                  ;------------------------------------------------------------------------------
   370                                  ; Read Sectors From Drive
   371                                  ;   al    - sectors to read
   372                                  ;   ch    - cylinder
   373                                  ;   cl    - sector
   374                                  ;   dh    - head
   375                                  ;   dl    - drive
   376                                  ;   es:bx - buffer
   377                                  int13_02:
   378                                  
   379                                    ;test al, al            ; test for zero loop count
   380                                    ;
   381                                    
   382 0000023F 80FA00                    cmp dl, 0x00            ; check this is our floppy
   383 00000242 7405                      je .int13_02_start
   384                                  
   385 00000244 B4AA                      mov ah, ERR_NOT_READY
   386 00000246 F9                        stc             ; CF = 1
   387 00000247 EB27                      jmp int13_exit
   388                                  
   389                                  .int13_02_start:
   390 00000249 50                        push ax
   391 0000024A E8B0FF                    call chs_to_lba
   392 0000024D 59                        pop cx
   393 0000024E 30ED                      xor ch, ch
   394 00000250 51                        push cx
   395                                  
   396                                  .int13_02_read_sector:
   397                                    ;call sd_read_sector
   398 00000251 84C0                      test al, al
   399 00000253 7408                      jz .int13_02_fail
   400 00000255 E2FA                      loop .int13_02_read_sector
   401                                  
   402 00000257 58                        pop ax                  ; al = sectors read
   403 00000258 B400                      mov ah, ERR_SUCCESS
   404 0000025A F8                        clc                     ; CF = 0
   405 0000025B EB13                      jmp int13_exit
   406                                  
   407                                  .int13_02_fail:
   408 0000025D 59                        pop cx                  ; cx was left on the stack so pop it
   409 0000025E B4AA                      mov ah, ERR_NOT_READY
   410 00000260 F9                        stc
   411 00000261 EB0D                      jmp int13_exit
   412                                  
   413                                  ;------------------------------------------------------------------------------
   414                                  int13_08:
   415 00000263 B80000                    mov ax, 0
   416 00000266 B201                      mov dl, 1
   417 00000268 BB0000                    mov bx, 0
   418 0000026B B400                      mov ah, ERR_SUCCESS
   419 0000026D F8                        clc             ; CF = 0
   420 0000026E EB00                      jmp int13_exit
   421                                  
   422                                  ;------------------------------------------------------------------------------
   423                                  int13_exit:
   424 00000270 5B                        pop bx
   425 00000271 5A                        pop dx
   426 00000272 59                        pop cx
   427 00000273 58                        pop ax
   428 00000274 FB                        sti
   429 00000275 CF                        iret
