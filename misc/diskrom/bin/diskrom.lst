     1                                  ;     _          _  ________
     2                                  ;    (_)_______ | |/ /_  __/
     3                                  ;   / / ___/ _ \|   / / /
     4                                  ;  / / /__/  __/   | / /
     5                                  ; /_/\___/\___/_/|_|/_/
     6                                  ;
     7                                  cpu 8086
     8                                  org 0
     9                                  [BITS 16]
    10                                  
    11                                  
    12                                  %define PORT_DEBUG    0xb0
    13                                  %define PORT_SPI_DATA 0xb8
    14                                  %define PORT_SPI_CTRL 0xb9
    15                                  %define PORT_CLICK    0xba
    16                                  
    17                                  %define SD_DUMMY_CLOCKS 10
    18                                  %define SD_SEND_DELAY   20
    19                                  %define SD_RESP_WAIT    16
    20                                  
    21                                  %define ERR_SUCCESS     0x00
    22                                  %define ERR_NOT_READY   0xaa
    23                                  %define ERR_INVALID_CMD 0x01
    24                                  
    25                                  %macro SD_SEND 1
    26                                    push ax
    27                                    mov al, %1
    28                                    call sd_send
    29                                    pop ax
    30                                  %endmacro
    31                                  
    32                                  %macro SD_SEND_CMD 6
    33                                    SD_SEND (0x40|%1)
    34                                    SD_SEND %2
    35                                    SD_SEND %3
    36                                    SD_SEND %4
    37                                    SD_SEND %5
    38                                    SD_SEND (0x01|%6)
    39                                  %endmacro
    40                                  
    41                                  %macro SD_DUMMY_BYTE 0
    42                                    push ax
    43                                    mov al, 0xff
    44                                    call sd_send
    45                                    pop ax
    46                                  %endmacro
    47                                  
    48                                  %macro SD_RECV 0
    49                                    call sd_recv
    50                                  %endmacro
    51                                  
    52                                  %macro SD_CS 1
    53                                    push ax
    54                                    mov al, %1
    55                                    call sd_set_cs
    56                                    pop ax
    57                                  %endmacro
    58                                  
    59                                  %macro DEBUG 1
    60                                    push ax
    61                                    mov ax, %1
    62                                    out PORT_DEBUG, al
    63                                    pop ax
    64                                  %endmacro
    65                                  
    66                                  ;------------------------------------------------------------------------------
    67                                  signature:
    68 00000000 55AA                      db 0x55, 0xAA
    69 00000002 04                        db 0x4
    70                                  
    71                                  ;------------------------------------------------------------------------------
    72                                  rom_entry:
    73 00000003 50                        push ax
    74 00000004 53                        push bx
    75 00000005 51                        push cx
    76 00000006 52                        push dx
    77 00000007 57                        push di
    78 00000008 56                        push si
    79 00000009 1E                        push ds
    80 0000000A E83700                    call sd_init
    81 0000000D 84C0                      test al, al
    82 0000000F 7403                      jz .rom_entry_fail
    83 00000011 E80800                    call install_int13
    84                                  .rom_entry_fail:
    85 00000014 1F                        pop ds
    86 00000015 5E                        pop si
    87 00000016 5F                        pop di
    88 00000017 5A                        pop dx
    89 00000018 59                        pop cx
    90 00000019 5B                        pop bx
    91 0000001A 58                        pop ax
    92 0000001B CB                        retf
    93                                  
    94                                  ;------------------------------------------------------------------------------
    95                                  install_int13:
    96 0000001C B80000                    mov ax, 0
    97 0000001F 8ED8                      mov ds, ax
    98 00000021 3E8C0E4E00                mov ds:[0x4e], cs
    99 00000026 B8[7F02]                  mov ax, int13
   100 00000029 3EA34C00                  mov ds:[0x4c], ax
   101 0000002D C3                        ret
   102                                  
   103                                  ;------------------------------------------------------------------------------
   104                                  sd_send:
   105 0000002E E6B8                      out PORT_SPI_DATA, al
   106 00000030 51                        push cx
   107 00000031 B91400                    mov cx, SD_SEND_DELAY
   108                                  .delay:
   109 00000034 90                        nop
   110 00000035 E2FD                      loop .delay
   111 00000037 59                        pop cx
   112 00000038 C3                        ret
   113                                  
   114                                  ;------------------------------------------------------------------------------
   115                                  sd_recv:
   116 00000039 B0FF                      mov al, 0xff
   117 0000003B E8F0FF                    call sd_send
   118 0000003E E4B8                      in al, PORT_SPI_DATA
   119 00000040 C3                        ret
   120                                  
   121                                  ;------------------------------------------------------------------------------
   122                                  sd_set_cs:
   123 00000041 E6B9                      out PORT_SPI_CTRL, al
   124 00000043 C3                        ret
   125                                  
   126                                  ;------------------------------------------------------------------------------
   127                                  sd_init:
   128                                  
   129                                    ;
   130                                    ; deassert SD card
   131                                    ;
   132                                    SD_CS 1
    53 00000044 50                  <1>  push ax
    54 00000045 B001                <1>  mov al, %1
    55 00000047 E8F7FF              <1>  call sd_set_cs
    56 0000004A 58                  <1>  pop ax
   133                                  
   134                                    ;
   135                                    ; send dummy clocks
   136                                    ;
   137 0000004B B90A00                    mov cx, SD_DUMMY_CLOCKS
   138                                  .dummy_clocks:
   139                                    SD_DUMMY_BYTE
    42 0000004E 50                  <1>  push ax
    43 0000004F B0FF                <1>  mov al, 0xff
    44 00000051 E8DAFF              <1>  call sd_send
    45 00000054 58                  <1>  pop ax
   140 00000055 E2F7                      loop .dummy_clocks
   141                                  
   142                                    ;
   143                                    ; assert SD card
   144                                    ;
   145                                    SD_CS 0
    53 00000057 50                  <1>  push ax
    54 00000058 B000                <1>  mov al, %1
    55 0000005A E8E4FF              <1>  call sd_set_cs
    56 0000005D 58                  <1>  pop ax
   146                                  
   147                                    ;
   148                                    ; send CMD0 (go idle)
   149                                    ;
   150                                  .step_1:
   151                                    SD_SEND_CMD 0, 0, 0, 0, 0, 0x95
    33                              <1>  SD_SEND (0x40|%1)
    26 0000005E 50                  <2>  push ax
    27 0000005F B040                <2>  mov al, %1
    28 00000061 E8CAFF              <2>  call sd_send
    29 00000064 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 00000065 50                  <2>  push ax
    27 00000066 B000                <2>  mov al, %1
    28 00000068 E8C3FF              <2>  call sd_send
    29 0000006B 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 0000006C 50                  <2>  push ax
    27 0000006D B000                <2>  mov al, %1
    28 0000006F E8BCFF              <2>  call sd_send
    29 00000072 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 00000073 50                  <2>  push ax
    27 00000074 B000                <2>  mov al, %1
    28 00000076 E8B5FF              <2>  call sd_send
    29 00000079 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 0000007A 50                  <2>  push ax
    27 0000007B B000                <2>  mov al, %1
    28 0000007D E8AEFF              <2>  call sd_send
    29 00000080 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 00000081 50                  <2>  push ax
    27 00000082 B095                <2>  mov al, %1
    28 00000084 E8A7FF              <2>  call sd_send
    29 00000087 58                  <2>  pop ax
   152                                  
   153 00000088 B91000                    mov cx, SD_RESP_WAIT
   154                                  .step_1_response:
   155                                    SD_RECV
    49 0000008B E8ABFF              <1>  call sd_recv
   156 0000008E 3C01                      cmp al, 0x01
   157 00000090 7405                      je .step_1_done
   158 00000092 E2F7                      loop .step_1_response
   159 00000094 E96401                    jmp .sd_init_fail
   160                                  .step_1_done:
   161                                  
   162                                    SD_DUMMY_BYTE
    42 00000097 50                  <1>  push ax
    43 00000098 B0FF                <1>  mov al, 0xff
    44 0000009A E891FF              <1>  call sd_send
    45 0000009D 58                  <1>  pop ax
   163                                    SD_DUMMY_BYTE
    42 0000009E 50                  <1>  push ax
    43 0000009F B0FF                <1>  mov al, 0xff
    44 000000A1 E88AFF              <1>  call sd_send
    45 000000A4 58                  <1>  pop ax
   164                                  
   165                                    ;
   166                                    ; send CMD8
   167                                    ;
   168                                  .step_2:
   169                                    SD_SEND_CMD 8, 0, 0, 1, 0xaa, 0x86
    33                              <1>  SD_SEND (0x40|%1)
    26 000000A5 50                  <2>  push ax
    27 000000A6 B048                <2>  mov al, %1
    28 000000A8 E883FF              <2>  call sd_send
    29 000000AB 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 000000AC 50                  <2>  push ax
    27 000000AD B000                <2>  mov al, %1
    28 000000AF E87CFF              <2>  call sd_send
    29 000000B2 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 000000B3 50                  <2>  push ax
    27 000000B4 B000                <2>  mov al, %1
    28 000000B6 E875FF              <2>  call sd_send
    29 000000B9 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 000000BA 50                  <2>  push ax
    27 000000BB B001                <2>  mov al, %1
    28 000000BD E86EFF              <2>  call sd_send
    29 000000C0 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 000000C1 50                  <2>  push ax
    27 000000C2 B0AA                <2>  mov al, %1
    28 000000C4 E867FF              <2>  call sd_send
    29 000000C7 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 000000C8 50                  <2>  push ax
    27 000000C9 B087                <2>  mov al, %1
    28 000000CB E860FF              <2>  call sd_send
    29 000000CE 58                  <2>  pop ax
   170                                  
   171 000000CF B91000                    mov cx, SD_RESP_WAIT
   172                                  .step_2_response:
   173                                    SD_RECV
    49 000000D2 E864FF              <1>  call sd_recv
   174 000000D5 3C01                      cmp al, 0x01
   175 000000D7 7405                      je .step_2_done
   176 000000D9 E2F7                      loop .step_2_response
   177 000000DB E91D01                    jmp .sd_init_fail
   178                                  .step_2_done:
   179                                    SD_RECV
    49 000000DE E858FF              <1>  call sd_recv
   180                                    SD_RECV
    49 000000E1 E855FF              <1>  call sd_recv
   181                                    SD_RECV
    49 000000E4 E852FF              <1>  call sd_recv
   182                                    SD_RECV
    49 000000E7 E84FFF              <1>  call sd_recv
   183 000000EA 3CAA                      cmp al, 0xaa
   184 000000EC 7403E90A01                jne .sd_init_fail
   185                                  
   186                                    ;
   187                                    ; send CMD58
   188                                    ;
   189                                  .step_3:
   190                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    33                              <1>  SD_SEND (0x40|%1)
    26 000000F1 50                  <2>  push ax
    27 000000F2 B07A                <2>  mov al, %1
    28 000000F4 E837FF              <2>  call sd_send
    29 000000F7 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 000000F8 50                  <2>  push ax
    27 000000F9 B000                <2>  mov al, %1
    28 000000FB E830FF              <2>  call sd_send
    29 000000FE 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 000000FF 50                  <2>  push ax
    27 00000100 B000                <2>  mov al, %1
    28 00000102 E829FF              <2>  call sd_send
    29 00000105 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 00000106 50                  <2>  push ax
    27 00000107 B000                <2>  mov al, %1
    28 00000109 E822FF              <2>  call sd_send
    29 0000010C 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 0000010D 50                  <2>  push ax
    27 0000010E B000                <2>  mov al, %1
    28 00000110 E81BFF              <2>  call sd_send
    29 00000113 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 00000114 50                  <2>  push ax
    27 00000115 B0CD                <2>  mov al, %1
    28 00000117 E814FF              <2>  call sd_send
    29 0000011A 58                  <2>  pop ax
   191                                  
   192 0000011B B91000                    mov cx, SD_RESP_WAIT
   193                                  .step_3_response:
   194                                    SD_RECV
    49 0000011E E818FF              <1>  call sd_recv
   195 00000121 3C01                      cmp al, 0x01
   196 00000123 7405                      je .step_3_done
   197 00000125 E2F7                      loop .step_3_response
   198 00000127 E9D100                    jmp .sd_init_fail
   199                                  .step_3_done:
   200                                    SD_RECV
    49 0000012A E80CFF              <1>  call sd_recv
   201                                    SD_RECV
    49 0000012D E809FF              <1>  call sd_recv
   202                                    SD_RECV
    49 00000130 E806FF              <1>  call sd_recv
   203                                    SD_RECV
    49 00000133 E803FF              <1>  call sd_recv
   204                                  
   205                                    ;
   206                                    ; send CMD55
   207                                    ;
   208 00000136 B9FFFF                    mov cx, 0xffff
   209                                  .step_4:
   210                                    SD_SEND_CMD 55, 0, 0, 0, 0, 0xcc
    33                              <1>  SD_SEND (0x40|%1)
    26 00000139 50                  <2>  push ax
    27 0000013A B077                <2>  mov al, %1
    28 0000013C E8EFFE              <2>  call sd_send
    29 0000013F 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 00000140 50                  <2>  push ax
    27 00000141 B000                <2>  mov al, %1
    28 00000143 E8E8FE              <2>  call sd_send
    29 00000146 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 00000147 50                  <2>  push ax
    27 00000148 B000                <2>  mov al, %1
    28 0000014A E8E1FE              <2>  call sd_send
    29 0000014D 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 0000014E 50                  <2>  push ax
    27 0000014F B000                <2>  mov al, %1
    28 00000151 E8DAFE              <2>  call sd_send
    29 00000154 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 00000155 50                  <2>  push ax
    27 00000156 B000                <2>  mov al, %1
    28 00000158 E8D3FE              <2>  call sd_send
    29 0000015B 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 0000015C 50                  <2>  push ax
    27 0000015D B0CD                <2>  mov al, %1
    28 0000015F E8CCFE              <2>  call sd_send
    29 00000162 58                  <2>  pop ax
   211 00000163 89CA                      mov dx, cx
   212 00000165 B91000                    mov cx, SD_RESP_WAIT
   213                                  .step_4_response:
   214                                    SD_RECV
    49 00000168 E8CEFE              <1>  call sd_recv
   215 0000016B A8FE                      test al, 0xfe
   216 0000016D 7405                      jz .step_4_done
   217 0000016F E2F7                      loop .step_4_response
   218 00000171 E98700                    jmp .sd_init_fail
   219                                  .step_4_done:
   220                                  
   221                                    ;
   222                                    ; send ACMD41
   223                                    ;
   224                                  .step_5:
   225                                    SD_SEND_CMD 41, 0x40, 0, 0, 0, 0xcc
    33                              <1>  SD_SEND (0x40|%1)
    26 00000174 50                  <2>  push ax
    27 00000175 B069                <2>  mov al, %1
    28 00000177 E8B4FE              <2>  call sd_send
    29 0000017A 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 0000017B 50                  <2>  push ax
    27 0000017C B040                <2>  mov al, %1
    28 0000017E E8ADFE              <2>  call sd_send
    29 00000181 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 00000182 50                  <2>  push ax
    27 00000183 B000                <2>  mov al, %1
    28 00000185 E8A6FE              <2>  call sd_send
    29 00000188 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 00000189 50                  <2>  push ax
    27 0000018A B000                <2>  mov al, %1
    28 0000018C E89FFE              <2>  call sd_send
    29 0000018F 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 00000190 50                  <2>  push ax
    27 00000191 B000                <2>  mov al, %1
    28 00000193 E898FE              <2>  call sd_send
    29 00000196 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 00000197 50                  <2>  push ax
    27 00000198 B0CD                <2>  mov al, %1
    28 0000019A E891FE              <2>  call sd_send
    29 0000019D 58                  <2>  pop ax
   226 0000019E B91000                    mov cx, SD_RESP_WAIT
   227                                  .step_5_response:
   228                                    SD_RECV
    49 000001A1 E895FE              <1>  call sd_recv
   229 000001A4 A8FE                      test al, 0xfe
   230 000001A6 7404                      jz .step_5_done
   231 000001A8 E2F7                      loop .step_5_response
   232 000001AA EB4F                      jmp .sd_init_fail 
   233                                  .step_5_done:
   234                                  
   235                                    ; if R1 response is not IDLE, issue ACMD41 again
   236 000001AC 84C0                      test al, al
   237 000001AE 7404                      jz .step_6  
   238 000001B0 89D1                      mov cx, dx
   239 000001B2 E285                      loop .step_4
   240                                  
   241                                    ;
   242                                    ; send CMD58
   243                                    ;
   244                                  .step_6:
   245                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    33                              <1>  SD_SEND (0x40|%1)
    26 000001B4 50                  <2>  push ax
    27 000001B5 B07A                <2>  mov al, %1
    28 000001B7 E874FE              <2>  call sd_send
    29 000001BA 58                  <2>  pop ax
    34                              <1>  SD_SEND %2
    26 000001BB 50                  <2>  push ax
    27 000001BC B000                <2>  mov al, %1
    28 000001BE E86DFE              <2>  call sd_send
    29 000001C1 58                  <2>  pop ax
    35                              <1>  SD_SEND %3
    26 000001C2 50                  <2>  push ax
    27 000001C3 B000                <2>  mov al, %1
    28 000001C5 E866FE              <2>  call sd_send
    29 000001C8 58                  <2>  pop ax
    36                              <1>  SD_SEND %4
    26 000001C9 50                  <2>  push ax
    27 000001CA B000                <2>  mov al, %1
    28 000001CC E85FFE              <2>  call sd_send
    29 000001CF 58                  <2>  pop ax
    37                              <1>  SD_SEND %5
    26 000001D0 50                  <2>  push ax
    27 000001D1 B000                <2>  mov al, %1
    28 000001D3 E858FE              <2>  call sd_send
    29 000001D6 58                  <2>  pop ax
    38                              <1>  SD_SEND (0x01|%6)
    26 000001D7 50                  <2>  push ax
    27 000001D8 B0CD                <2>  mov al, %1
    28 000001DA E851FE              <2>  call sd_send
    29 000001DD 58                  <2>  pop ax
   246                                  
   247 000001DE B91000                    mov cx, SD_RESP_WAIT
   248                                  .step_6_response:
   249                                    SD_RECV
    49 000001E1 E855FE              <1>  call sd_recv
   250 000001E4 84C0                      test al, al
   251 000001E6 7404                      jz .step_6_done
   252 000001E8 E2F7                      loop .step_6_response
   253 000001EA EB0F                      jmp .sd_init_fail
   254                                  .step_6_done:
   255                                    SD_RECV   ; if &0xc0 then is SDHC
    49 000001EC E84AFE              <1>  call sd_recv
   256                                    SD_RECV
    49 000001EF E847FE              <1>  call sd_recv
   257                                    SD_RECV
    49 000001F2 E844FE              <1>  call sd_recv
   258                                    SD_RECV
    49 000001F5 E841FE              <1>  call sd_recv
   259                                  
   260                                  .sd_init_success:
   261 000001F8 B001                      mov al, 1
   262 000001FA C3                        ret
   263                                  
   264                                  .sd_init_fail:
   265 000001FB B000                      mov al, 0
   266 000001FD C3                        ret
   267                                  
   268                                  ;------------------------------------------------------------------------------
   269                                  ; ax    = sector
   270                                  ; es:bx = dest
   271                                  sd_read_sector:
   272                                  
   273                                    ;
   274                                    ; click generator
   275                                    ;
   276 000001FE E6BA                      out PORT_CLICK, al
   277                                  
   278                                    ;
   279                                    ; send CMD17
   280                                    ;
   281                                    SD_SEND (0x40|17)
    26 00000200 50                  <1>  push ax
    27 00000201 B051                <1>  mov al, %1
    28 00000203 E828FE              <1>  call sd_send
    29 00000206 58                  <1>  pop ax
   282                                    SD_SEND 0
    26 00000207 50                  <1>  push ax
    27 00000208 B000                <1>  mov al, %1
    28 0000020A E821FE              <1>  call sd_send
    29 0000020D 58                  <1>  pop ax
   283                                    SD_SEND 0
    26 0000020E 50                  <1>  push ax
    27 0000020F B000                <1>  mov al, %1
    28 00000211 E81AFE              <1>  call sd_send
    29 00000214 58                  <1>  pop ax
   284                                    SD_SEND ah
    26 00000215 50                  <1>  push ax
    27 00000216 88E0                <1>  mov al, %1
    28 00000218 E813FE              <1>  call sd_send
    29 0000021B 58                  <1>  pop ax
   285                                    SD_SEND al
    26 0000021C 50                  <1>  push ax
    27 0000021D 88C0                <1>  mov al, %1
    28 0000021F E80CFE              <1>  call sd_send
    29 00000222 58                  <1>  pop ax
   286                                    SD_SEND (0x01|0xcc)
    26 00000223 50                  <1>  push ax
    27 00000224 B0CD                <1>  mov al, %1
    28 00000226 E805FE              <1>  call sd_send
    29 00000229 58                  <1>  pop ax
   287                                  
   288 0000022A 51                        push cx
   289 0000022B B90800                    mov cx, 8
   290                                  .cmd_17_response:
   291                                    SD_RECV
    49 0000022E E808FE              <1>  call sd_recv
   292 00000231 84C0                      test al, al
   293 00000233 7404                      jz .cmd_17_done
   294 00000235 E2F7                      loop .cmd_17_response
   295 00000237 EB1E                      jmp .fail
   296                                  .cmd_17_done:
   297                                  
   298                                    ; wait for start of block byte
   299 00000239 B9FF00                    mov cx, 0xff
   300                                  .wait_start:
   301                                    SD_RECV
    49 0000023C E8FAFD              <1>  call sd_recv
   302 0000023F 3CFE                      cmp al, 0xfe
   303 00000241 7404                      je .recv_start
   304 00000243 E2F7                      loop .wait_start
   305 00000245 EB10                      jmp .fail
   306                                  .recv_start:
   307                                  
   308                                    ; read a 512byte block
   309 00000247 B90002                    mov cx, 512
   310                                  .recv_sector:
   311                                    SD_RECV
    49 0000024A E8ECFD              <1>  call sd_recv
   312 0000024D 268807                    mov es:[bx], al
   313 00000250 43                        inc bx
   314 00000251 E2F7                      loop .recv_sector
   315                                  
   316                                  .success:
   317 00000253 59                        pop cx
   318 00000254 B001                      mov al, 1
   319 00000256 C3                        ret
   320                                  
   321                                  .fail:
   322 00000257 59                        pop cx
   323 00000258 B000                      mov al, 0
   324 0000025A C3                        ret
   325                                  
   326                                  ;------------------------------------------------------------------------------
   327                                  ;  const uint32_t lba = (cylinder * HEADS + head) * SECTORS + sector;
   328                                  ;   ch    - cylinder  (80)
   329                                  ;   cl    - sector    (18)
   330                                  ;   dh    - head      (2)
   331                                  chs_to_lba:
   332 0000025B 53                        push bx
   333 0000025C 52                        push dx
   334 0000025D 51                        push cx
   335 0000025E 31C0                      xor ax, ax
   336 00000260 88E8                      mov al, ch
   337 00000262 01C0                      add ax, ax    ; acum = cylinder * 2
   338 00000264 30ED                      xor ch, ch    ; ch is no longer needed
   339 00000266 88F2                      mov dl, dh
   340 00000268 30F6                      xor dh, dh    ; dx  = head
   341 0000026A 01D0                      add ax, dx    ; accum += head
   342 0000026C D1E0                      shl ax, 1
   343 0000026E 89C3                      mov bx, ax    ; bx = accum * 2
   344 00000270 D1E0                      shl ax, 1
   345 00000272 D1E0                      shl ax, 1
   346 00000274 D1E0                      shl ax, 1
   347 00000276 01D8                      add ax, bx    ; accum *= 18
   348 00000278 49                        dec cx
   349 00000279 01C8                      add ax, cx    ; accum += (sector - 1)
   350 0000027B 59                        pop cx
   351 0000027C 5A                        pop dx
   352 0000027D 5B                        pop bx
   353 0000027E C3                        ret
   354                                  
   355                                  ;------------------------------------------------------------------------------
   356                                  int13:
   357 0000027F FA                        cli
   358                                  
   359 00000280 52                        push dx
   360 00000281 51                        push cx
   361 00000282 53                        push bx
   362 00000283 50                        push ax
   363                                  
   364                                    ; dispatch to specific handler
   365 00000284 80FC02                    cmp ah, 0x02
   366 00000287 7419                      je int13_02
   367 00000289 80FC00                    cmp ah, 0x00
   368 0000028C 740F                      je int13_00
   369 0000028E 80FC08                    cmp ah, 0x08
   370 00000291 743A                      je int13_08
   371 00000293 80FC15                    cmp ah, 0x15
   372 00000296 744F                      je int13_15
   373                                  
   374 00000298 B400                      mov ah, ERR_SUCCESS
   375 0000029A F8                        clc             ; CF = 0
   376 0000029B EB53                      jmp int13_exit
   377                                  
   378                                  ;------------------------------------------------------------------------------
   379                                  int13_00:
   380 0000029D B400                      mov ah, ERR_SUCCESS
   381 0000029F F8                        clc             ; CF = 0
   382 000002A0 EB4E                      jmp int13_exit
   383                                  
   384                                  ;------------------------------------------------------------------------------
   385                                  ; Read Sectors From Drive
   386                                  ;   al    - sectors to read
   387                                  ;   ch    - cylinder
   388                                  ;   cl    - sector
   389                                  ;   dh    - head
   390                                  ;   dl    - drive
   391                                  ;   es:bx - buffer
   392                                  int13_02:
   393 000002A2 50                        push ax
   394 000002A3 E8B5FF                    call chs_to_lba
   395 000002A6 59                        pop cx
   396 000002A7 30ED                      xor ch, ch
   397 000002A9 51                        push cx
   398                                  
   399                                  .int13_02_read_sector:
   400 000002AA 50                        push ax                 ; preserve sector number
   401 000002AB E850FF                    call sd_read_sector
   402 000002AE 84C0                      test al, al
   403 000002B0 740A                      jz .int13_02_fail
   404 000002B2 58                        pop ax                  ; restore sector number
   405 000002B3 40                        inc ax                  ; advance to the next sector
   406 000002B4 E2F4                      loop .int13_02_read_sector
   407                                  
   408 000002B6 58                        pop ax                  ; al = sectors read
   409 000002B7 B400                      mov ah, ERR_SUCCESS
   410 000002B9 F8                        clc                     ; CF = 0
   411 000002BA EB34                      jmp int13_exit
   412                                  
   413                                  .int13_02_fail:
   414 000002BC 59                        pop cx                  ; cx was left on the stack so pop it
   415 000002BD B4AA                      mov ah, ERR_NOT_READY
   416 000002BF F9                        stc
   417 000002C0 EB2E                      jmp int13_exit
   418                                  
   419                                  ;------------------------------------------------------------------------------
   420                                  disk_base_table:
   421 000002C2 CF                      	db	11001111b
   422 000002C3 02                      	db	2
   423 000002C4 25                      	db	25h
   424 000002C5 02                      	db	2           ; 2 - 512 bytes
   425 000002C6 11                      	db	17          ; sectors per track (last sector number)
   426 000002C7 2A                      	db	2Ah
   427 000002C8 FF                      	db	0FFh
   428 000002C9 50                      	db	50h
   429 000002CA F6                      	db	0F6h
   430 000002CB 19                      	db	19h
   431 000002CC 04                      	db	4
   432                                  
   433                                  ;------------------------------------------------------------------------------
   434                                  int13_08:
   435 000002CD 8CC8                      mov ax, cs
   436 000002CF 8EC0                      mov es, ax
   437 000002D1 BF[C202]                  mov di, disk_base_table
   438 000002D4 58                        pop ax
   439 000002D5 5B                        pop bx
   440 000002D6 59                        pop cx
   441 000002D7 5A                        pop dx
   442 000002D8 B304                      mov bl, 4       ; 1.44Mb disk
   443 000002DA B550                      mov ch, 80      ; cylinders
   444 000002DC B112                      mov cl, 18      ; sectors
   445 000002DE B601                      mov dh, 1       ; sides (zero based)
   446 000002E0 B201                      mov dl, 1       ; number of drives attached
   447 000002E2 B400                      mov ah, ERR_SUCCESS
   448 000002E4 F8                        clc             ; CF = 0
   449 000002E5 FB                        sti
   450 000002E6 CF                        iret
   451                                  
   452                                  ;------------------------------------------------------------------------------
   453                                  int13_15:
   454 000002E7 58                        pop ax
   455 000002E8 5B                        pop bx
   456 000002E9 59                        pop cx
   457 000002EA 5A                        pop dx
   458 000002EB B401                      mov ah, 1       ; diskette no change detection present
   459 000002ED F8                        clc             ; CF = 0
   460 000002EE FB                        sti
   461 000002EF CF                        iret
   462                                  
   463                                  ;------------------------------------------------------------------------------
   464                                  int13_exit:
   465                                  
   466                                    ; fix return code as some functions need to return values
   467                                    ;
   468                                    ; 02 need to return in AL
   469                                    ; AH has status code
   470                                    ; can we move the value to the stack before it gets popd?
   471                                  
   472 000002F0 88E7                      mov bh, ah
   473 000002F2 58                        pop ax
   474 000002F3 88FC                      mov ah, bh
   475 000002F5 5B                        pop bx
   476 000002F6 59                        pop cx
   477 000002F7 5A                        pop dx
   478 000002F8 FB                        sti
   479 000002F9 CF                        iret
