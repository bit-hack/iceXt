     1                                  ;     _          _  ________
     2                                  ;    (_)_______ | |/ /_  __/
     3                                  ;   / / ___/ _ \|   / / /
     4                                  ;  / / /__/  __/   | / /
     5                                  ; /_/\___/\___/_/|_|/_/
     6                                  ;
     7                                  cpu 8086
     8                                  org 0
     9                                  [BITS 16]
    10                                  
    11                                  
    12                                  %define PORT_DEBUG    0xb0
    13                                  %define PORT_SPI_DATA 0xb8
    14                                  %define PORT_SPI_CTRL 0xb9
    15                                  %define PORT_CLICK    0xba
    16                                  
    17                                  %define SD_DUMMY_CLOCKS 10
    18                                  %define SD_SEND_DELAY   20
    19                                  %define SD_RESP_WAIT    16
    20                                  
    21                                  %define ERR_SUCCESS     0x00
    22                                  %define ERR_NOT_READY   0xaa
    23                                  %define ERR_INVALID_CMD 0x01
    24                                  
    25                                  %define USE_HDD 1
    26                                  
    27                                  %macro SD_SEND 1
    28                                    push ax
    29                                    mov al, %1
    30                                    call sd_send
    31                                    pop ax
    32                                  %endmacro
    33                                  
    34                                  %macro SD_SEND_CMD 6
    35                                    SD_SEND (0x40|%1)
    36                                    SD_SEND %2
    37                                    SD_SEND %3
    38                                    SD_SEND %4
    39                                    SD_SEND %5
    40                                    SD_SEND (0x01|%6)
    41                                  %endmacro
    42                                  
    43                                  %macro SD_DUMMY_BYTE 0
    44                                    push ax
    45                                    mov al, 0xff
    46                                    call sd_send
    47                                    pop ax
    48                                  %endmacro
    49                                  
    50                                  %macro SD_RECV 0
    51                                    call sd_recv
    52                                  %endmacro
    53                                  
    54                                  %macro SD_CS 1
    55                                    push ax
    56                                    mov al, %1
    57                                    call sd_set_cs
    58                                    pop ax
    59                                  %endmacro
    60                                  
    61                                  %macro DEBUG 1
    62                                    push ax
    63                                    mov ax, %1
    64                                    out PORT_DEBUG, al
    65                                    pop ax
    66                                  %endmacro
    67                                  
    68                                  ;------------------------------------------------------------------------------
    69                                  signature:
    70 00000000 55AA                      db 0x55, 0xAA
    71 00000002 04                        db 0x4
    72                                  
    73                                  ;------------------------------------------------------------------------------
    74                                  rom_entry:
    75 00000003 50                        push ax
    76 00000004 53                        push bx
    77 00000005 51                        push cx
    78 00000006 52                        push dx
    79 00000007 57                        push di
    80 00000008 56                        push si
    81 00000009 1E                        push ds
    82 0000000A E83700                    call sd_init
    83 0000000D 84C0                      test al, al
    84 0000000F 7403                      jz .rom_entry_fail
    85 00000011 E80800                    call install_int13
    86                                  .rom_entry_fail:
    87 00000014 1F                        pop ds
    88 00000015 5E                        pop si
    89 00000016 5F                        pop di
    90 00000017 5A                        pop dx
    91 00000018 59                        pop cx
    92 00000019 5B                        pop bx
    93 0000001A 58                        pop ax
    94 0000001B CB                        retf
    95                                  
    96                                  ;------------------------------------------------------------------------------
    97                                  install_int13:
    98 0000001C B80000                    mov ax, 0
    99 0000001F 8ED8                      mov ds, ax
   100 00000021 3E8C0E4E00                mov ds:[0x4e], cs
   101 00000026 B8[AF02]                  mov ax, int13
   102 00000029 3EA34C00                  mov ds:[0x4c], ax
   103 0000002D C3                        ret
   104                                  
   105                                  ;------------------------------------------------------------------------------
   106                                  sd_send:
   107 0000002E E6B8                      out PORT_SPI_DATA, al
   108 00000030 51                        push cx
   109 00000031 B91400                    mov cx, SD_SEND_DELAY
   110                                  .delay:
   111 00000034 90                        nop
   112 00000035 E2FD                      loop .delay
   113 00000037 59                        pop cx
   114 00000038 C3                        ret
   115                                  
   116                                  ;------------------------------------------------------------------------------
   117                                  sd_recv:
   118 00000039 B0FF                      mov al, 0xff
   119 0000003B E8F0FF                    call sd_send
   120 0000003E E4B8                      in al, PORT_SPI_DATA
   121 00000040 C3                        ret
   122                                  
   123                                  ;------------------------------------------------------------------------------
   124                                  sd_set_cs:
   125 00000041 E6B9                      out PORT_SPI_CTRL, al
   126 00000043 C3                        ret
   127                                  
   128                                  ;------------------------------------------------------------------------------
   129                                  sd_init:
   130                                  
   131                                    ;
   132                                    ; deassert SD card
   133                                    ;
   134                                    SD_CS 1
    55 00000044 50                  <1>  push ax
    56 00000045 B001                <1>  mov al, %1
    57 00000047 E8F7FF              <1>  call sd_set_cs
    58 0000004A 58                  <1>  pop ax
   135                                  
   136                                    ;
   137                                    ; send dummy clocks
   138                                    ;
   139 0000004B B90A00                    mov cx, SD_DUMMY_CLOCKS
   140                                  .dummy_clocks:
   141                                    SD_DUMMY_BYTE
    44 0000004E 50                  <1>  push ax
    45 0000004F B0FF                <1>  mov al, 0xff
    46 00000051 E8DAFF              <1>  call sd_send
    47 00000054 58                  <1>  pop ax
   142 00000055 E2F7                      loop .dummy_clocks
   143                                  
   144                                    ;
   145                                    ; assert SD card
   146                                    ;
   147                                    SD_CS 0
    55 00000057 50                  <1>  push ax
    56 00000058 B000                <1>  mov al, %1
    57 0000005A E8E4FF              <1>  call sd_set_cs
    58 0000005D 58                  <1>  pop ax
   148                                  
   149                                    ;
   150                                    ; send CMD0 (go idle)
   151                                    ;
   152                                  .step_1:
   153                                    SD_SEND_CMD 0, 0, 0, 0, 0, 0x95
    35                              <1>  SD_SEND (0x40|%1)
    28 0000005E 50                  <2>  push ax
    29 0000005F B040                <2>  mov al, %1
    30 00000061 E8CAFF              <2>  call sd_send
    31 00000064 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 00000065 50                  <2>  push ax
    29 00000066 B000                <2>  mov al, %1
    30 00000068 E8C3FF              <2>  call sd_send
    31 0000006B 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 0000006C 50                  <2>  push ax
    29 0000006D B000                <2>  mov al, %1
    30 0000006F E8BCFF              <2>  call sd_send
    31 00000072 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 00000073 50                  <2>  push ax
    29 00000074 B000                <2>  mov al, %1
    30 00000076 E8B5FF              <2>  call sd_send
    31 00000079 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 0000007A 50                  <2>  push ax
    29 0000007B B000                <2>  mov al, %1
    30 0000007D E8AEFF              <2>  call sd_send
    31 00000080 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 00000081 50                  <2>  push ax
    29 00000082 B095                <2>  mov al, %1
    30 00000084 E8A7FF              <2>  call sd_send
    31 00000087 58                  <2>  pop ax
   154                                  
   155 00000088 B91000                    mov cx, SD_RESP_WAIT
   156                                  .step_1_response:
   157                                    SD_RECV
    51 0000008B E8ABFF              <1>  call sd_recv
   158 0000008E 3C01                      cmp al, 0x01
   159 00000090 7405                      je .step_1_done
   160 00000092 E2F7                      loop .step_1_response
   161 00000094 E96401                    jmp .sd_init_fail
   162                                  .step_1_done:
   163                                  
   164                                    SD_DUMMY_BYTE
    44 00000097 50                  <1>  push ax
    45 00000098 B0FF                <1>  mov al, 0xff
    46 0000009A E891FF              <1>  call sd_send
    47 0000009D 58                  <1>  pop ax
   165                                    SD_DUMMY_BYTE
    44 0000009E 50                  <1>  push ax
    45 0000009F B0FF                <1>  mov al, 0xff
    46 000000A1 E88AFF              <1>  call sd_send
    47 000000A4 58                  <1>  pop ax
   166                                  
   167                                    ;
   168                                    ; send CMD8
   169                                    ;
   170                                  .step_2:
   171                                    SD_SEND_CMD 8, 0, 0, 1, 0xaa, 0x86
    35                              <1>  SD_SEND (0x40|%1)
    28 000000A5 50                  <2>  push ax
    29 000000A6 B048                <2>  mov al, %1
    30 000000A8 E883FF              <2>  call sd_send
    31 000000AB 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 000000AC 50                  <2>  push ax
    29 000000AD B000                <2>  mov al, %1
    30 000000AF E87CFF              <2>  call sd_send
    31 000000B2 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 000000B3 50                  <2>  push ax
    29 000000B4 B000                <2>  mov al, %1
    30 000000B6 E875FF              <2>  call sd_send
    31 000000B9 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 000000BA 50                  <2>  push ax
    29 000000BB B001                <2>  mov al, %1
    30 000000BD E86EFF              <2>  call sd_send
    31 000000C0 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 000000C1 50                  <2>  push ax
    29 000000C2 B0AA                <2>  mov al, %1
    30 000000C4 E867FF              <2>  call sd_send
    31 000000C7 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 000000C8 50                  <2>  push ax
    29 000000C9 B087                <2>  mov al, %1
    30 000000CB E860FF              <2>  call sd_send
    31 000000CE 58                  <2>  pop ax
   172                                  
   173 000000CF B91000                    mov cx, SD_RESP_WAIT
   174                                  .step_2_response:
   175                                    SD_RECV
    51 000000D2 E864FF              <1>  call sd_recv
   176 000000D5 3C01                      cmp al, 0x01
   177 000000D7 7405                      je .step_2_done
   178 000000D9 E2F7                      loop .step_2_response
   179 000000DB E91D01                    jmp .sd_init_fail
   180                                  .step_2_done:
   181                                    SD_RECV
    51 000000DE E858FF              <1>  call sd_recv
   182                                    SD_RECV
    51 000000E1 E855FF              <1>  call sd_recv
   183                                    SD_RECV
    51 000000E4 E852FF              <1>  call sd_recv
   184                                    SD_RECV
    51 000000E7 E84FFF              <1>  call sd_recv
   185 000000EA 3CAA                      cmp al, 0xaa
   186 000000EC 7403E90A01                jne .sd_init_fail
   187                                  
   188                                    ;
   189                                    ; send CMD58
   190                                    ;
   191                                  .step_3:
   192                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    35                              <1>  SD_SEND (0x40|%1)
    28 000000F1 50                  <2>  push ax
    29 000000F2 B07A                <2>  mov al, %1
    30 000000F4 E837FF              <2>  call sd_send
    31 000000F7 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 000000F8 50                  <2>  push ax
    29 000000F9 B000                <2>  mov al, %1
    30 000000FB E830FF              <2>  call sd_send
    31 000000FE 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 000000FF 50                  <2>  push ax
    29 00000100 B000                <2>  mov al, %1
    30 00000102 E829FF              <2>  call sd_send
    31 00000105 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 00000106 50                  <2>  push ax
    29 00000107 B000                <2>  mov al, %1
    30 00000109 E822FF              <2>  call sd_send
    31 0000010C 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 0000010D 50                  <2>  push ax
    29 0000010E B000                <2>  mov al, %1
    30 00000110 E81BFF              <2>  call sd_send
    31 00000113 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 00000114 50                  <2>  push ax
    29 00000115 B0CD                <2>  mov al, %1
    30 00000117 E814FF              <2>  call sd_send
    31 0000011A 58                  <2>  pop ax
   193                                  
   194 0000011B B91000                    mov cx, SD_RESP_WAIT
   195                                  .step_3_response:
   196                                    SD_RECV
    51 0000011E E818FF              <1>  call sd_recv
   197 00000121 3C01                      cmp al, 0x01
   198 00000123 7405                      je .step_3_done
   199 00000125 E2F7                      loop .step_3_response
   200 00000127 E9D100                    jmp .sd_init_fail
   201                                  .step_3_done:
   202                                    SD_RECV
    51 0000012A E80CFF              <1>  call sd_recv
   203                                    SD_RECV
    51 0000012D E809FF              <1>  call sd_recv
   204                                    SD_RECV
    51 00000130 E806FF              <1>  call sd_recv
   205                                    SD_RECV
    51 00000133 E803FF              <1>  call sd_recv
   206                                  
   207                                    ;
   208                                    ; send CMD55
   209                                    ;
   210 00000136 B9FFFF                    mov cx, 0xffff
   211                                  .step_4:
   212                                    SD_SEND_CMD 55, 0, 0, 0, 0, 0xcc
    35                              <1>  SD_SEND (0x40|%1)
    28 00000139 50                  <2>  push ax
    29 0000013A B077                <2>  mov al, %1
    30 0000013C E8EFFE              <2>  call sd_send
    31 0000013F 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 00000140 50                  <2>  push ax
    29 00000141 B000                <2>  mov al, %1
    30 00000143 E8E8FE              <2>  call sd_send
    31 00000146 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 00000147 50                  <2>  push ax
    29 00000148 B000                <2>  mov al, %1
    30 0000014A E8E1FE              <2>  call sd_send
    31 0000014D 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 0000014E 50                  <2>  push ax
    29 0000014F B000                <2>  mov al, %1
    30 00000151 E8DAFE              <2>  call sd_send
    31 00000154 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 00000155 50                  <2>  push ax
    29 00000156 B000                <2>  mov al, %1
    30 00000158 E8D3FE              <2>  call sd_send
    31 0000015B 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 0000015C 50                  <2>  push ax
    29 0000015D B0CD                <2>  mov al, %1
    30 0000015F E8CCFE              <2>  call sd_send
    31 00000162 58                  <2>  pop ax
   213 00000163 89CA                      mov dx, cx
   214 00000165 B91000                    mov cx, SD_RESP_WAIT
   215                                  .step_4_response:
   216                                    SD_RECV
    51 00000168 E8CEFE              <1>  call sd_recv
   217 0000016B A8FE                      test al, 0xfe
   218 0000016D 7405                      jz .step_4_done
   219 0000016F E2F7                      loop .step_4_response
   220 00000171 E98700                    jmp .sd_init_fail
   221                                  .step_4_done:
   222                                  
   223                                    ;
   224                                    ; send ACMD41
   225                                    ;
   226                                  .step_5:
   227                                    SD_SEND_CMD 41, 0x40, 0, 0, 0, 0xcc
    35                              <1>  SD_SEND (0x40|%1)
    28 00000174 50                  <2>  push ax
    29 00000175 B069                <2>  mov al, %1
    30 00000177 E8B4FE              <2>  call sd_send
    31 0000017A 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 0000017B 50                  <2>  push ax
    29 0000017C B040                <2>  mov al, %1
    30 0000017E E8ADFE              <2>  call sd_send
    31 00000181 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 00000182 50                  <2>  push ax
    29 00000183 B000                <2>  mov al, %1
    30 00000185 E8A6FE              <2>  call sd_send
    31 00000188 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 00000189 50                  <2>  push ax
    29 0000018A B000                <2>  mov al, %1
    30 0000018C E89FFE              <2>  call sd_send
    31 0000018F 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 00000190 50                  <2>  push ax
    29 00000191 B000                <2>  mov al, %1
    30 00000193 E898FE              <2>  call sd_send
    31 00000196 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 00000197 50                  <2>  push ax
    29 00000198 B0CD                <2>  mov al, %1
    30 0000019A E891FE              <2>  call sd_send
    31 0000019D 58                  <2>  pop ax
   228 0000019E B91000                    mov cx, SD_RESP_WAIT
   229                                  .step_5_response:
   230                                    SD_RECV
    51 000001A1 E895FE              <1>  call sd_recv
   231 000001A4 A8FE                      test al, 0xfe
   232 000001A6 7404                      jz .step_5_done
   233 000001A8 E2F7                      loop .step_5_response
   234 000001AA EB4F                      jmp .sd_init_fail 
   235                                  .step_5_done:
   236                                  
   237                                    ; if R1 response is not IDLE, issue ACMD41 again
   238 000001AC 84C0                      test al, al
   239 000001AE 7404                      jz .step_6  
   240 000001B0 89D1                      mov cx, dx
   241 000001B2 E285                      loop .step_4
   242                                  
   243                                    ;
   244                                    ; send CMD58
   245                                    ;
   246                                  .step_6:
   247                                    SD_SEND_CMD 58, 0, 0, 0, 0, 0xcc
    35                              <1>  SD_SEND (0x40|%1)
    28 000001B4 50                  <2>  push ax
    29 000001B5 B07A                <2>  mov al, %1
    30 000001B7 E874FE              <2>  call sd_send
    31 000001BA 58                  <2>  pop ax
    36                              <1>  SD_SEND %2
    28 000001BB 50                  <2>  push ax
    29 000001BC B000                <2>  mov al, %1
    30 000001BE E86DFE              <2>  call sd_send
    31 000001C1 58                  <2>  pop ax
    37                              <1>  SD_SEND %3
    28 000001C2 50                  <2>  push ax
    29 000001C3 B000                <2>  mov al, %1
    30 000001C5 E866FE              <2>  call sd_send
    31 000001C8 58                  <2>  pop ax
    38                              <1>  SD_SEND %4
    28 000001C9 50                  <2>  push ax
    29 000001CA B000                <2>  mov al, %1
    30 000001CC E85FFE              <2>  call sd_send
    31 000001CF 58                  <2>  pop ax
    39                              <1>  SD_SEND %5
    28 000001D0 50                  <2>  push ax
    29 000001D1 B000                <2>  mov al, %1
    30 000001D3 E858FE              <2>  call sd_send
    31 000001D6 58                  <2>  pop ax
    40                              <1>  SD_SEND (0x01|%6)
    28 000001D7 50                  <2>  push ax
    29 000001D8 B0CD                <2>  mov al, %1
    30 000001DA E851FE              <2>  call sd_send
    31 000001DD 58                  <2>  pop ax
   248                                  
   249 000001DE B91000                    mov cx, SD_RESP_WAIT
   250                                  .step_6_response:
   251                                    SD_RECV
    51 000001E1 E855FE              <1>  call sd_recv
   252 000001E4 84C0                      test al, al
   253 000001E6 7404                      jz .step_6_done
   254 000001E8 E2F7                      loop .step_6_response
   255 000001EA EB0F                      jmp .sd_init_fail
   256                                  .step_6_done:
   257                                    SD_RECV   ; if &0xc0 then is SDHC
    51 000001EC E84AFE              <1>  call sd_recv
   258                                    SD_RECV
    51 000001EF E847FE              <1>  call sd_recv
   259                                    SD_RECV
    51 000001F2 E844FE              <1>  call sd_recv
   260                                    SD_RECV
    51 000001F5 E841FE              <1>  call sd_recv
   261                                  
   262                                  .sd_init_success:
   263 000001F8 B001                      mov al, 1
   264 000001FA C3                        ret
   265                                  
   266                                  .sd_init_fail:
   267 000001FB B000                      mov al, 0
   268 000001FD C3                        ret
   269                                  
   270                                  ;------------------------------------------------------------------------------
   271                                  ; ax    = sector
   272                                  ; es:bx = dest
   273                                  sd_read_sector:
   274                                  
   275                                    ;
   276                                    ; click generator
   277                                    ;
   278 000001FE E6BA                      out PORT_CLICK, al
   279                                  
   280                                    ;
   281                                    ; send CMD17
   282                                    ;
   283                                    SD_SEND (0x40|17)
    28 00000200 50                  <1>  push ax
    29 00000201 B051                <1>  mov al, %1
    30 00000203 E828FE              <1>  call sd_send
    31 00000206 58                  <1>  pop ax
   284                                    SD_SEND 0
    28 00000207 50                  <1>  push ax
    29 00000208 B000                <1>  mov al, %1
    30 0000020A E821FE              <1>  call sd_send
    31 0000020D 58                  <1>  pop ax
   285                                    SD_SEND 0
    28 0000020E 50                  <1>  push ax
    29 0000020F B000                <1>  mov al, %1
    30 00000211 E81AFE              <1>  call sd_send
    31 00000214 58                  <1>  pop ax
   286                                    SD_SEND ah
    28 00000215 50                  <1>  push ax
    29 00000216 88E0                <1>  mov al, %1
    30 00000218 E813FE              <1>  call sd_send
    31 0000021B 58                  <1>  pop ax
   287                                    SD_SEND al
    28 0000021C 50                  <1>  push ax
    29 0000021D 88C0                <1>  mov al, %1
    30 0000021F E80CFE              <1>  call sd_send
    31 00000222 58                  <1>  pop ax
   288                                    SD_SEND (0x01|0xcc)
    28 00000223 50                  <1>  push ax
    29 00000224 B0CD                <1>  mov al, %1
    30 00000226 E805FE              <1>  call sd_send
    31 00000229 58                  <1>  pop ax
   289                                  
   290 0000022A 51                        push cx
   291 0000022B B90800                    mov cx, 8
   292                                  .cmd_17_response:
   293                                    SD_RECV
    51 0000022E E808FE              <1>  call sd_recv
   294 00000231 84C0                      test al, al
   295 00000233 7404                      jz .cmd_17_done
   296 00000235 E2F7                      loop .cmd_17_response
   297 00000237 EB1E                      jmp .fail
   298                                  .cmd_17_done:
   299                                  
   300                                    ; wait for start of block byte
   301 00000239 B9FF00                    mov cx, 0xff
   302                                  .wait_start:
   303                                    SD_RECV
    51 0000023C E8FAFD              <1>  call sd_recv
   304 0000023F 3CFE                      cmp al, 0xfe
   305 00000241 7404                      je .recv_start
   306 00000243 E2F7                      loop .wait_start
   307 00000245 EB10                      jmp .fail
   308                                  .recv_start:
   309                                  
   310                                    ; read a 512byte block
   311 00000247 B90002                    mov cx, 512
   312                                  .recv_sector:
   313                                    SD_RECV
    51 0000024A E8ECFD              <1>  call sd_recv
   314 0000024D 268807                    mov es:[bx], al
   315 00000250 43                        inc bx
   316 00000251 E2F7                      loop .recv_sector
   317                                  
   318                                  .success:
   319 00000253 59                        pop cx
   320 00000254 B001                      mov al, 1
   321 00000256 C3                        ret
   322                                  
   323                                  .fail:
   324 00000257 59                        pop cx
   325 00000258 B000                      mov al, 0
   326 0000025A C3                        ret
   327                                  
   328                                  ;------------------------------------------------------------------------------
   329                                  ;  const uint32_t lba = (cylinder * HEADS + head) * SECTORS + sector;
   330                                  ;   ch    - cylinder  (64)
   331                                  ;   cl    - sector    (63)
   332                                  ;   dh    - head      (16)
   333                                  chs_to_lba_hdd:
   334 0000025B 53                        push bx
   335 0000025C 52                        push dx
   336 0000025D 51                        push cx
   337 0000025E 31C0                      xor ax, ax    ; accum = 0
   338 00000260 88E8                      mov al, ch
   339 00000262 D1E0                      shl ax, 1
   340 00000264 D1E0                      shl ax, 1
   341 00000266 D1E0                      shl ax, 1
   342 00000268 D1E0                      shl ax, 1     ; accum = cylinder * 16
   343 0000026A 88F2                      mov dl, dh
   344 0000026C 30F6                      xor dh, dh
   345 0000026E 01D0                      add ax, dx    ; accum += head
   346 00000270 89C3                      mov bx, ax
   347 00000272 D1E0                      shl ax, 1
   348 00000274 D1E0                      shl ax, 1
   349 00000276 D1E0                      shl ax, 1
   350 00000278 D1E0                      shl ax, 1
   351 0000027A D1E0                      shl ax, 1
   352 0000027C 89C2                      mov dx, ax
   353 0000027E 29DA                      sub dx, bx
   354 00000280 01D0                      add ax, dx    ; accum *= 63
   355 00000282 30ED                      xor ch, ch
   356 00000284 49                        dec cx
   357 00000285 01C8                      add ax, cx    ; accum += (sector - 1)
   358 00000287 59                        pop cx
   359 00000288 5A                        pop dx
   360 00000289 5B                        pop bx
   361 0000028A C3                        ret
   362                                  
   363                                  ;------------------------------------------------------------------------------
   364                                  ;  const uint32_t lba = (cylinder * HEADS + head) * SECTORS + sector;
   365                                  ;   ch    - cylinder  (80)
   366                                  ;   cl    - sector    (18)
   367                                  ;   dh    - head      (2)
   368                                  chs_to_lba_fdd:
   369 0000028B 53                        push bx
   370 0000028C 52                        push dx
   371 0000028D 51                        push cx
   372 0000028E 31C0                      xor ax, ax
   373 00000290 88E8                      mov al, ch
   374 00000292 01C0                      add ax, ax    ; acum = cylinder * 2
   375 00000294 30ED                      xor ch, ch    ; ch is no longer needed
   376 00000296 88F2                      mov dl, dh
   377 00000298 30F6                      xor dh, dh    ; dx  = head
   378 0000029A 01D0                      add ax, dx    ; accum += head
   379 0000029C D1E0                      shl ax, 1
   380 0000029E 89C3                      mov bx, ax    ; bx = accum * 2
   381 000002A0 D1E0                      shl ax, 1
   382 000002A2 D1E0                      shl ax, 1
   383 000002A4 D1E0                      shl ax, 1
   384 000002A6 01D8                      add ax, bx    ; accum *= 18
   385 000002A8 49                        dec cx
   386 000002A9 01C8                      add ax, cx    ; accum += (sector - 1)
   387 000002AB 59                        pop cx
   388 000002AC 5A                        pop dx
   389 000002AD 5B                        pop bx
   390 000002AE C3                        ret
   391                                  
   392                                  ;------------------------------------------------------------------------------
   393                                  int13:
   394                                  
   395                                    ; out 0xbc, ax
   396                                    ; iret
   397                                  
   398 000002AF E7B0                      out 0xb0, ax  ; enable debugging
   399                                  
   400 000002B1 FA                        cli
   401                                  
   402 000002B2 52                        push dx
   403 000002B3 51                        push cx
   404 000002B4 53                        push bx
   405 000002B5 50                        push ax
   406                                  
   407                                  %if USE_HDD
   408 000002B6 80FA80                    cmp dl, 0x80
   409 000002B9 7519                      jne .not_hdd
   410                                  %endif
   411                                  
   412                                    ; dispatch to specific handler
   413 000002BB 80FC02                    cmp ah, 0x02
   414 000002BE 741E                      je int13_02
   415 000002C0 80FC00                    cmp ah, 0x00
   416 000002C3 7414                      je int13_00
   417 000002C5 80FC08                    cmp ah, 0x08
   418 000002C8 743F                      je int13_08
   419 000002CA 80FC15                    cmp ah, 0x15
   420 000002CD 744E                      je int13_15
   421                                  
   422 000002CF B400                      mov ah, ERR_SUCCESS
   423 000002D1 F8                        clc             ; CF = 0
   424 000002D2 EB52                      jmp int13_exit
   425                                  
   426                                  .not_hdd:
   427 000002D4 B401                      mov ah, 1
   428 000002D6 F9                        stc             ; CF = 1
   429 000002D7 EB4D                      jmp int13_exit
   430                                  
   431                                  ;------------------------------------------------------------------------------
   432                                  int13_00:
   433 000002D9 B400                      mov ah, ERR_SUCCESS
   434 000002DB F8                        clc             ; CF = 0
   435 000002DC EB48                      jmp int13_exit
   436                                  
   437                                  ;------------------------------------------------------------------------------
   438                                  ; Read Sectors From Drive
   439                                  ;   al    - sectors to read
   440                                  ;   ch    - cylinder
   441                                  ;   cl    - sector
   442                                  ;   dh    - head
   443                                  ;   dl    - drive
   444                                  ;   es:bx - buffer
   445                                  int13_02:
   446 000002DE 50                        push ax
   447                                  %if USE_HDD
   448 000002DF E879FF                    call chs_to_lba_hdd
   449                                  %else
   450                                    call chs_to_lba_fdd
   451                                  %endif
   452 000002E2 59                        pop cx
   453 000002E3 30ED                      xor ch, ch
   454 000002E5 51                        push cx
   455                                  
   456                                  .int13_02_read_sector:
   457 000002E6 50                        push ax                 ; preserve sector number
   458 000002E7 E814FF                    call sd_read_sector
   459 000002EA 84C0                      test al, al
   460 000002EC 740A                      jz .int13_02_fail
   461 000002EE 58                        pop ax                  ; restore sector number
   462 000002EF 40                        inc ax                  ; advance to the next sector
   463 000002F0 E2F4                      loop .int13_02_read_sector
   464                                  
   465 000002F2 58                        pop ax                  ; al = sectors read
   466 000002F3 B400                      mov ah, ERR_SUCCESS
   467 000002F5 F8                        clc                     ; CF = 0
   468 000002F6 EB2E                      jmp int13_exit
   469                                  
   470                                  .int13_02_fail:
   471 000002F8 59                        pop cx                  ; cx was left on the stack so pop it
   472 000002F9 B4AA                      mov ah, ERR_NOT_READY
   473 000002FB F9                        stc
   474 000002FC EB28                      jmp int13_exit
   475                                  
   476                                  ;------------------------------------------------------------------------------
   477                                  disk_base_table:
   478 000002FE CF                      	db	11001111b
   479 000002FF 02                      	db	2
   480 00000300 25                      	db	25h
   481 00000301 02                      	db	2           ; 2 - 512 bytes
   482 00000302 11                      	db	17          ; sectors per track (last sector number)
   483 00000303 2A                      	db	2Ah
   484 00000304 FF                      	db	0FFh
   485 00000305 50                      	db	50h
   486 00000306 F6                      	db	0F6h
   487 00000307 19                      	db	19h
   488 00000308 04                      	db	4
   489                                  
   490                                  ;------------------------------------------------------------------------------
   491                                  int13_08:
   492                                  %if USE_HDD == 0
   493                                    mov ax, cs
   494                                    mov es, ax
   495                                    mov di, disk_base_table
   496                                  %endif
   497 00000309 58                        pop ax
   498 0000030A 5B                        pop bx
   499 0000030B 59                        pop cx
   500 0000030C 5A                        pop dx
   501                                  %if USE_HDD
   502 0000030D B53F                      mov ch, 63
   503 0000030F B13F                      mov cl, 63
   504 00000311 B60F                      mov dh, 15
   505 00000313 B201                      mov dl, 1
   506 00000315 BB0000                    mov bx, 0
   507                                  %else
   508                                    mov bl, 4       ; 1.44Mb disk
   509                                    mov ch, 80      ; cylinders
   510                                    mov cl, 18      ; sectors
   511                                    mov dh, 1       ; sides (zero based)
   512                                    mov dl, 1       ; number of drives attached
   513                                  %endif
   514 00000318 B400                      mov ah, ERR_SUCCESS
   515 0000031A F8                        clc             ; CF = 0
   516 0000031B EB13                      jmp int32_exit_cf
   517                                  
   518                                  ;------------------------------------------------------------------------------
   519                                  int13_15:
   520 0000031D 58                        pop ax
   521 0000031E 5B                        pop bx
   522 0000031F 59                        pop cx
   523 00000320 5A                        pop dx
   524 00000321 B401                      mov ah, 1       ; diskette no change detection present
   525 00000323 F8                        clc             ; CF = 0
   526 00000324 EB0A                      jmp int32_exit_cf
   527                                  
   528                                  ;------------------------------------------------------------------------------
   529                                  int13_exit:
   530                                    ; fix return code as some functions need to return values
   531                                    ;
   532                                    ; 02 need to return in AL
   533                                    ; AH has status code
   534                                    ; can we move the value to the stack before it gets popd?
   535                                  
   536 00000326 88E7                      mov bh, ah
   537 00000328 58                        pop ax
   538 00000329 88FC                      mov ah, bh
   539 0000032B 5B                        pop bx
   540 0000032C 59                        pop cx
   541 0000032D 5A                        pop dx
   542 0000032E EB00                      jmp int32_exit_cf
   543                                  
   544                                  ;------------------------------------------------------------------------------
   545                                  ; return from interrupt but propagate the carry flag
   546                                  int32_exit_cf:
   547 00000330 7212                      jb  .int32_exit_cf1
   548 00000332 56                        push si
   549 00000333 89E6                      mov si, sp
   550 00000335 83C606                    add si, 6
   551 00000338 368024FE                  and byte ss:[si], 0xfe
   552 0000033C 83EE06                    sub si, 6
   553 0000033F 5E                        pop si
   554 00000340 FB                        sti
   555 00000341 E7B2                      out 0xb2, ax  ; turn off debugging
   556 00000343 CF                        iret
   557                                  .int32_exit_cf1:
   558 00000344 56                        push si
   559 00000345 89E6                      mov si, sp
   560 00000347 83C606                    add si, 6
   561 0000034A 36800C01                  or byte ss:[si], 1
   562 0000034E 83EE06                    sub si, 6
   563 00000351 5E                        pop si
   564 00000352 FB                        sti
   565 00000353 E7B2                      out 0xb2, ax  ; turn off debugging
   566 00000355 CF                        iret
